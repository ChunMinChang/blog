I"á<p>Itâ€™s common sense that the time complexity of insertion and removal of a
hash table are all both <em>O(1)</em>, while array takes <em>O(n)</em> for removal.
However, when the data size(<em>n</em>) is small, the array will beat the hash table.</p>

<p>Here is the result from my test<a href="https://gist.github.com/ChunMinChang/b6b7b534e1ef3683f76d830d72c489a6" title="Performance: Mutable array v.s. Hashtable">(gist here)</a></p>
<noscript><pre># Performance: Mutable array v.s. Hashtable

Subjects:
- mutable array: ```std::vector```
- hash table: ```std::unordered_map```

## Results

### Insertion time(ms)
| Data Size          | 10    | 50    | 100   | 1000  | 5000  | 10000 |
| ------------------ | ----- | ----- | ----- | ----- | ----- | ----- |
| std::vector        | 0.015 | 0.021 | 0.097 | 0.093 | 0.366 | 0.616 |
| std::unordered_map | 0.034 | 0.081 | 0.202 | 0.503 | 2.425 | 3.482 |


### Removal time(ms)
| Data Size          | 10    | 50    | 100   | 1000  | 5000   | 10000   |
| ------------------ | ----- | ----- | ----- | ----- | ------ | ------- |
| std::vector        | 0.008 | 0.046 | 0.129 | 3.82  | 88.562 | 344.566 |
| std::unordered_map | 0.013 | 0.051 | 0.078 | 0.456 | 2.14   | 3.6     |</pre></noscript>
<script src="https://gist.github.com/ChunMinChang/b6b7b534e1ef3683f76d830d72c489a6.js?file=README.md"> </script>

<p>By the results, if you are pretty sure the data size is less than <code class="highlighter-rouge">50</code>
then you should use <code class="highlighter-rouge">std::vector</code> instead of <code class="highlighter-rouge">std::unordered_map</code>.</p>

<p>On the other hand, if you need to insert and remove itmes frequently,
and the data size is greater than <code class="highlighter-rouge">50</code>,
then you should use <code class="highlighter-rouge">std::unordered_map</code> instead of <code class="highlighter-rouge">std::vector</code>.
If items are inserted frequently but removed rarely, <code class="highlighter-rouge">std::vector</code> is fine.</p>

:ET