I"qç<p>How to get a random number in <em>[0, M)</em> by a random number generator
that randomly throws a number in <em>[0, N)</em> with equal probability ?</p>

<!--read more-->

<h1 id="randm-by-randn"><script type="math/tex">Rand(M)</script> by <script type="math/tex">Rand(N)</script></h1>

<p>In this post, <script type="math/tex">Rand \; K</script> or <script type="math/tex">Rand(K)</script> denotes a random number generator
that produce a integer randomly in <script type="math/tex">[0, K)</script>
(or <script type="math/tex">[0, K - 1]</script>, from <script type="math/tex">0</script> to <script type="math/tex">K-1</script> inclusively)
with equal probability.</p>

<p>We can simply divide this problem into two cases: <script type="math/tex">M \leq N</script> or <script type="math/tex">M \gt N</script>.</p>

<h2 id="m-leq-n"><script type="math/tex">M \leq N</script></h2>

<p>If <script type="math/tex">M \leq N</script>, then the range <script type="math/tex">[0, M)</script> is in the range <script type="math/tex">[0, N)</script>.
Therefore, the probability of a number choosed by <script type="math/tex">Rand(N)</script> in <script type="math/tex">[0, M)</script>
is same. All of them are <script type="math/tex">\frac{1}{N}</script>.</p>

<table>
  <thead>
    <tr>
      <th>number</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><script type="math/tex">0</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M-1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">N-1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
    </tr>
  </tbody>
</table>

<p>What we want is to develop a method
that can randomly choose a number in <script type="math/tex">[0, M)</script> with equal probability.
We can leverage this fact.</p>

<p>The simplest way is to <strong>re-produce</strong> a number
if the number produced is out of the range we want (<script type="math/tex">[0, M)</script>).
That is, if the number produced is in <script type="math/tex">[M, N)</script>,
we <strong>re-generate</strong> a number.</p>

<p>Does it work? Thatâ€™s check the probability for each number.
For each round, the probability we need to re-generate a number is <script type="math/tex">\frac{N - M}{N}</script>.
Hence, the probability to get a number <script type="math/tex">i</script> in the <script type="math/tex">K</script> round
can be organized as the following table,
where <script type="math/tex">i \in [0, M)</script> and <script type="math/tex">K \in \mathbb{N}</script>.</p>

<table>
  <thead>
    <tr>
      <th>round</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><script type="math/tex">1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2</script></td>
      <td><script type="math/tex">\frac{N - M}{N} \cdot \frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">3</script></td>
      <td><script type="math/tex">{(\frac{N - M}{N})}^{2} \cdot \frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">K</script></td>
      <td><script type="math/tex">{(\frac{N - M}{N})}^{K-1} \cdot \frac{1}{N}</script></td>
    </tr>
  </tbody>
</table>

<p>As a result, the probability to get the number <script type="math/tex">i</script> is</p>

<script type="math/tex; mode=display">\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}
= \frac{1}{N}
+ \frac{N - M}{N} \cdot \frac{1}{N}
+ {(\frac{N - M}{N})}^{2} \cdot \frac{1}{N}
+ \ldots
+ {(\frac{N - M}{N})}^{K-1} \cdot \frac{1}{N}</script>

<p>This is same for all number <script type="math/tex">i</script>, where <script type="math/tex">i \in [0, M)</script>.</p>

<table>
  <thead>
    <tr>
      <th>number</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><script type="math/tex">0</script></td>
      <td><script type="math/tex">\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">1</script></td>
      <td><script type="math/tex">\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2</script></td>
      <td><script type="math/tex">\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M-1</script></td>
      <td><script type="math/tex">\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}</script></td>
    </tr>
  </tbody>
</table>

<p>By now, we alreay know how to randomly generate a number in a smaller range
from a random number generator in a bigger range.</p>

<p>In brief, the algorithm is</p>
<ol>
  <li>Get a random number <script type="math/tex">x</script> in <script type="math/tex">[0, N)</script></li>
  <li>If <script type="math/tex">x</script> is in <script type="math/tex">[0, M)</script>, then return <script type="math/tex">x</script></li>
  <li>Otherwise, repeat from 1</li>
</ol>

<p>The following <em>Rust</em> program is the method we developed above:</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Get a random number in [0, s) by a random number generator in [0, b),</span>
<span class="c">// where both s, b are integers and s &gt; 1, b &gt; 1, s &lt;= b</span>
<span class="k">fn</span> <span class="nf">rand_small_from_big</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">s</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">s</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">);</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="c">// Get a random number in [0, b)</span>
        <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">rand</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
        <span class="c">// Return the random number if it is in [0, s)</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">s</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c">// Repeating if the random number is in [s, b)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>See the live demo <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=798f79143be66cecd08f81b48a97dd4b" title="Compute Rand([0, s)) from Rand([0, b)), where b, s are integers and b &gt;= s">here</a>.</p>

<p>Actually, we could make some improvement for this approach. 
By the above approach, itâ€™s very likely to re-produce the random number 
again and again when <script type="math/tex">N</script> is much bigger than <script type="math/tex">M</script>.
The problem is, the number is only valid when itâ€™s in <script type="math/tex">[0, M)</script>.
When <script type="math/tex">M \ll N</script>, the chance to get a valid random number is very small.
For example, if <script type="math/tex">N = 101, M = 2</script>,
the probability to get a valid number is lower than <script type="math/tex">2\%(2/101)</script>.
The produced number is only valid when itâ€™s <script type="math/tex">0</script> or <script type="math/tex">1</script>.
Itâ€™s inefficient.</p>

<p>A simple solution is to make the number valid in <script type="math/tex">[0, k \cdot M)</script>,
where the <script type="math/tex">k \in \mathbb{N}</script>.
The <script type="math/tex">k \cdot M</script> is the maximal multiple of <script type="math/tex">M</script> in <script type="math/tex">[0, N)</script>.
If the number is in <script type="math/tex">[0, k \cdot M)</script>,
then we can take the remainder of the produced number divided by <script type="math/tex">M</script>
as the produced random number.</p>

<table>
  <thead>
    <tr>
      <th>number</th>
      <th>probability</th>
      <th>evaluated</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><script type="math/tex">0</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">0</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">1</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">2</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M-1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">M-1</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">0</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M+1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">1</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M+2</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">2</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2M-1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">M-1</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2M</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">0</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2M+1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">1</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2M+2</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">2</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">kM-1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">M-1</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">kM</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">0</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">kM+1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">kM+1</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">kM+2</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">kM+2</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">N-1</script></td>
      <td><script type="math/tex">\frac{1}{N}</script></td>
      <td><script type="math/tex">N-1</script></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>evaluated</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><script type="math/tex">0</script></td>
      <td><script type="math/tex">\frac{k}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">1</script></td>
      <td><script type="math/tex">\frac{k}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2</script></td>
      <td><script type="math/tex">\frac{k}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M-1</script></td>
      <td><script type="math/tex">\frac{k}{N}</script></td>
    </tr>
    <tr>
      <td>others</td>
      <td><script type="math/tex">\frac{N - k \cdot M}{N}</script></td>
    </tr>
  </tbody>
</table>

<p>As a result, the probability to get the number <script type="math/tex">i</script> is</p>

<script type="math/tex; mode=display">\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}
= \frac{k}{N}
+ \frac{N - k \cdot M}{N} \cdot \frac{k}{N}
+ {(\frac{N - k \cdot M}{N})}^{2} \cdot \frac{k}{N}
+ \ldots
+ {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}</script>

<p>This is same for all number <script type="math/tex">i</script>, where <script type="math/tex">i \in [0, M)</script>.</p>

<table>
  <thead>
    <tr>
      <th>number</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><script type="math/tex">0</script></td>
      <td><script type="math/tex">\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">1</script></td>
      <td><script type="math/tex">\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">2</script></td>
      <td><script type="math/tex">\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">M-1</script></td>
      <td><script type="math/tex">\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}</script></td>
    </tr>
  </tbody>
</table>

<p>The higher <script type="math/tex">k</script> is, the higher probability to get a valid number.
In the above example, if <script type="math/tex">N = 101, M = 2</script>, then <script type="math/tex">k = 50</script>.
The probability to get a valid number is <script type="math/tex">100/101</script>
since the produced number is valid from <script type="math/tex">0</script> to <script type="math/tex">99</script>.
Every even number in <script type="math/tex">[0, 100)</script> (<script type="math/tex">0, 2, 4, \dots, 98</script>)
will be evaluated to <script type="math/tex">0</script>
and every odd number in <script type="math/tex">[0, 100)</script> (<script type="math/tex">1, 3, 5, \dots, 99</script>)
will be evaluated to <script type="math/tex">1</script>,
since the remainders of the produced even numbers divided by <script type="math/tex">M</script>
and odd numbers divided by <script type="math/tex">M</script> are <script type="math/tex">0</script> and <script type="math/tex">1</script> respectively.
That is, the probability becomes <script type="math/tex">k</script> times.</p>

<p>To sum up, the algorithm is</p>
<ol>
  <li>Define <script type="math/tex">K</script> to the max multiple of <script type="math/tex">M</script> in <script type="math/tex">N</script></li>
  <li>Get a random number <script type="math/tex">x</script> in <script type="math/tex">[0, N)</script></li>
  <li>If <script type="math/tex">x</script> is in <script type="math/tex">[0, K)</script>, then return <script type="math/tex">x % M</script></li>
  <li>Otherwise, repeat from 2</li>
</ol>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Get a random number in [0, s) by a random number generator in [0, b),</span>
<span class="c">// where both s, b are integers and s &gt; 1, b &gt; 1, s &lt;= b</span>
<span class="k">fn</span> <span class="nf">rand_small_from_big</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">s</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">s</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">);</span>
    <span class="c">// Get the max multiple of s in [0, b)</span>
    <span class="k">let</span> <span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">/</span> <span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="n">s</span><span class="p">;</span>
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="n">max</span> <span class="o">%</span> <span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="c">// Get a random number in [0, b)</span>
        <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">rand</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
        <span class="c">// Return the random number if it is in [0, max)</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">max</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="n">s</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c">// Repeating if the random number is in [max, b)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>See the live demo <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b7f99315bbdfdf475658529be8dc80b8" title="Compute Rand([0, s)) from Rand([0, b)), where b, s are integers and b &gt;= s">here</a>.</p>

<h2 id="m-gt-n"><script type="math/tex">M \gt N</script></h2>

<p>However, if <script type="math/tex">M \gt N</script>, our method above doesnâ€™t work,
since the range of <script type="math/tex">[0, M)</script> is bigger than <script type="math/tex">[0, N)</script> <em>(really? keep reading!)</em>.</p>

<p>To get a random number in <script type="math/tex">[0, M)</script>,
we need to <strong>enlarge</strong> the range of the numbers produced
by the given generator. How to do that ?</p>

<p>OK, the number of results from the generator is <script type="math/tex">N</script> now.
How to enlarge the range of results ?
Should we generate two numbers and do some magic math ?</p>

<p>How many results we have if we generate two numbers ?
If we see the results as <strong>permutations</strong>, itâ€™s <script type="math/tex">N^2</script>.</p>

<p>When <script type="math/tex">N = 2</script>, the results are <script type="math/tex">(0, 0), (0, 1), (1, 0), (1, 1)</script>.
The probability of each result is <script type="math/tex">1/4</script>.</p>

<table>
  <thead>
    <tr>
      <th>1st</th>
      <th>2nd</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td><script type="math/tex">\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}</script></td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td><script type="math/tex">\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}</script></td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td><script type="math/tex">\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}</script></td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td><script type="math/tex">\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}</script></td>
    </tr>
  </tbody>
</table>

<p>If the results can be mapped from <script type="math/tex">(0, 0), (0, 1), (1, 0), (1, 1)</script>
to <script type="math/tex">0, 1, 2, 3</script>, it means we <strong>have a way</strong> to enlarge the range of results
from <script type="math/tex">[0, 1]</script> to <script type="math/tex">[0, 1, 2, 3]</script>.</p>

<p>Well, is it possible to do that ?
If we observe carefully,
itâ€™s natural to map <script type="math/tex">(0, 0), (0, 1), (1, 0), (1, 1)</script> to <script type="math/tex">0, 1, 2, 3</script>.
If we see <script type="math/tex">00, 01, 10, 11</script> as binary numbers <script type="math/tex">{00}_{2}, {01}_{2}, {10}_{2}, {11}_{2}</script>,
then they are naturally <script type="math/tex">0, 1, 2, 3</script>.</p>

<p>The same approach also works
when we produce two numbers from random number generator whose range is <script type="math/tex">[0, 3)</script>.
There are <script type="math/tex">3 \cdot 3 = 9</script> results: <script type="math/tex">(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)</script>.</p>

<table>
  <thead>
    <tr>
      <th>1st</th>
      <th>2nd</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>0</td>
      <td>2</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>2</td>
      <td>0</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>2</td>
      <td>1</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
    <tr>
      <td>2</td>
      <td>2</td>
      <td><script type="math/tex">\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}</script></td>
    </tr>
  </tbody>
</table>

<p>If we see them as the <strong>base-<script type="math/tex">3</script></strong> numbers, they are naturally <script type="math/tex">0, 1, 2, 3, 4, 5, 6, 7, 8</script>.</p>

<p>By applying this generating-two-numbers approach for a random number generator with range in <script type="math/tex">[0, N)</script>,
the sequential results <script type="math/tex">(i, j)</script>, where <script type="math/tex">i, j \in [0, N)</script>,
can be mapped to <script type="math/tex">0, 1, 2, \ldots, N^2 - 1</script> (range in <script type="math/tex">[0, N^2)</script>)
by treating them as <strong>base-<script type="math/tex">N</script></strong> numbers <script type="math/tex">{ij}_{N}</script>.</p>

<p>In general, for the random number generator with range in <script type="math/tex">[0, N)</script>,
there are <script type="math/tex">N^k</script> sequential results for producing <script type="math/tex">k</script> numbers.
The sequential results are <script type="math/tex">(x_0, x_1, \ldots, x_{k-1})</script>, where <script type="math/tex">x_i \in [0, N)</script> and <script type="math/tex">i \in [0, k)</script>.
By taking the sequential results in <strong>base-<script type="math/tex">N</script></strong> : <script type="math/tex">{(x_0 x_1 \ldots x_{k-1})}_{N}</script>,
their valus are naturally <script type="math/tex">0, 1, 2, \ldots, N^k</script>.
It is how the <strong>base-<script type="math/tex">N</script></strong> number works.</p>

<table>
  <thead>
    <tr>
      <th>1st</th>
      <th>2nd</th>
      <th><script type="math/tex">\ldots</script></th>
      <th>kth</th>
      <th>probability</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>0</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>1</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>2</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>N-1</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td>N-1</td>
      <td>N-1</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>0</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
    <tr>
      <td>N-1</td>
      <td>N-1</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>1</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
    <tr>
      <td>N-1</td>
      <td>N-1</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>2</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
    <tr>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
      <td><script type="math/tex">\vdots</script></td>
    </tr>
    <tr>
      <td>N-1</td>
      <td>N-1</td>
      <td><script type="math/tex">\ldots</script></td>
      <td>N-1</td>
      <td><script type="math/tex">\frac{1}{N^k}</script></td>
    </tr>
  </tbody>
</table>

<p>When producing <script type="math/tex">k</script> numbers by the random number generator with range in <script type="math/tex">[0, N)</script>,
the sequential results <script type="math/tex">x_0, x_1, \ldots, x_{k-1}</script> can be mapped to a number in <script type="math/tex">[0, N^k)</script>
by encoding them as a <strong>base-<script type="math/tex">N</script></strong> number <script type="math/tex">{(x_0 x_1 \ldots x_{k-1})}_{N}</script>.</p>

<p>The idea can be implemented as the following program:</p>
<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Map the result of (x_0, x_1, ..., x_{k-1})</span>
<span class="c">// to (x_0 x_1 ... x_{k-1}) in base-N number</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="mi">_</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">k</span> <span class="p">{</span>
    <span class="c">// Repeat k times</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">N</span> <span class="o">+</span> <span class="nf">rand</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There are <script type="math/tex">N^k</script> kinds of sequential results for producing <script type="math/tex">k</script> numbers.
The probability for each one is <script type="math/tex">\frac{1}{N^k}</script>.
By this approach, we have a way to get one result
in the <script type="math/tex">N^k</script> kinds of sequential results.
That is, we have a way to generate a random number in <script type="math/tex">[0, N^k)</script>
by the random number generator in <script type="math/tex">[0, N)</script>.</p>

<p>The original problem is to find a way to generate a random number in <script type="math/tex">[0, M)</script>
by the random number generator in <script type="math/tex">[0, N)</script>, where <script type="math/tex">M \gt N</script>.
Since we alreay know how to get a random number in a smaller range by
a random number generator in a bigger range
(the method developped in the <script type="math/tex">M \leq N</script> case),
if we can find a <script type="math/tex">k</script> such that <script type="math/tex">N^k \geq M</script>, then the problem can be solved!</p>

<p>The <script type="math/tex">k</script> can be calculated by <em>logarithm</em>:</p>

<script type="math/tex; mode=display">N^k \geq M
\Rightarrow k \geq \log_N M</script>

<p>The corresponding program is:</p>
<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Return minimal k such that N^k &gt;= M</span>
<span class="k">fn</span> <span class="nf">min_pow</span><span class="p">(</span><span class="n">N</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">M</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">M_f64</span> <span class="o">=</span> <span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">M</span><span class="p">);</span>
    <span class="k">let</span> <span class="n">N_f64</span> <span class="o">=</span> <span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
    <span class="n">M_f64</span><span class="nf">.log</span><span class="p">(</span><span class="n">N_f64</span><span class="p">)</span><span class="nf">.ceil</span><span class="p">())</span> <span class="k">as</span> <span class="nb">u32</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To sum up, if <script type="math/tex">M \gt N</script>, then</p>
<ol>
  <li>Find a <script type="math/tex">k</script> such that <script type="math/tex">N^k \geq M</script></li>
  <li>Define <script type="math/tex">Y</script> to the max multiple of <script type="math/tex">M</script> in <script type="math/tex">N^k</script></li>
  <li>Get the random number generator in <script type="math/tex">[0, N^k)</script></li>
  <li>Generate a random number in <script type="math/tex">[0, M)</script>:
    <ol>
      <li>Get a random number <script type="math/tex">x</script> in <script type="math/tex">[0, N^k)</script></li>
      <li>If <script type="math/tex">x</script> is in <script type="math/tex">[0, Y)</script>, then return <script type="math/tex">x % M</script></li>
      <li>Otherwise, repeat from 3-1</li>
    </ol>
  </li>
</ol>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Get a random number in [0, b) by a random number generator in [0, s),</span>
<span class="c">// where both s, b are integers and s &gt; 1, b &gt; 1, s &lt;= b</span>
<span class="k">fn</span> <span class="nf">rand_big_from_small</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">s</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">s</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">);</span>
    <span class="c">// Get a minimal number p such that s^p &gt;= b</span>
    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="nf">min_pow</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">s</span><span class="nf">.pow</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">b</span><span class="p">);</span>
    <span class="c">// Get the max multiple of b in [0, s^p)</span>
    <span class="k">let</span> <span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span><span class="nf">.pow</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">/</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
    <span class="nd">assert_eq!</span><span class="p">(</span><span class="n">max</span> <span class="o">%</span> <span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="c">// Get a random number in [0, s^p)</span>
        <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">rand_pow</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
        <span class="c">// Return the random number if it is in [0, max)</span>
        <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">max</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">r</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c">// Repeating if the random number is in [max, s^p)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">// Get a random from [0, x^y)</span>
<span class="k">fn</span> <span class="nf">rand_pow</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="mi">_</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">y</span> <span class="p">{</span>
        <span class="c">// Repeat y times</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="nf">rand</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">r</span>
<span class="p">}</span>

<span class="c">// Return minimal k such that x^k &gt;= y</span>
<span class="k">fn</span> <span class="nf">min_pow</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="p">(</span><span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="nf">.log</span><span class="p">(</span><span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">x</span><span class="p">))</span><span class="nf">.ceil</span><span class="p">())</span> <span class="k">as</span> <span class="nb">u32</span>
<span class="p">}</span>
</code></pre></div></div>

<p>See the live demo <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d91510a1d8e25fe29baf0d445d8eb0f4" title="Compute Rand([0, b)) from Rand([0, s)), where b, s are integers and b &gt;= s">here</a>.</p>

<h3 id="enlarge-from-0-1-ldots-n-1-to-0-1-ldots-nk-1">Enlarge from <script type="math/tex">[0, 1, \ldots, N-1]</script> to <script type="math/tex">[0, 1, \ldots, N^k-1]</script></h3>

<p>An interesting view to look the line <script type="math/tex">x * N + rand(N)</script> is to think
<script type="math/tex">x</script> is a <script type="math/tex">l</script> numbers sequence from <script type="math/tex">a</script> to <script type="math/tex">a + l - 1</script>, <script type="math/tex">[a, a + 1, a + 2, \ldots, a + l - 1]</script>
and <script type="math/tex">rand(N)</script> is a list from <script type="math/tex">0</script> to <script type="math/tex">N-1</script>, <script type="math/tex">[0, 1, 2, \ldots, N - 1]</script>.
In this case, <script type="math/tex">x * N + rand(N)</script> is something like</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// x is [a, a + 1, a + 2, ..., a + l - 1]</span>
<span class="k">fn</span> <span class="nf">enlarge</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">offsets</span><span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">u32</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="n">N</span><span class="p">)</span><span class="nf">.collect</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">out</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
    <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">x</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="n">in</span> <span class="n">offsets</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">out</span><span class="nf">.push</span><span class="p">(</span><span class="n">N</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">out</span>
<span class="p">}</span>
</code></pre></div></div>

<p>What <code class="highlighter-rouge">enlarge</code> does is to enlarge a sequence
from <script type="math/tex">[a, a + 1, a + 2, \ldots, a + l - 1]</script>
to <script type="math/tex">[a \cdot N, a \cdot N + 1, a \cdot N + 2, \ldots, (a + l) \cdot N  - 1)]</script>.</p>

<p>By multiplying <script type="math/tex">N</script> on each value in <script type="math/tex">[a, a + 1, a + 2, \ldots, a + l - 1]</script>,
the difference between <script type="math/tex">i</script> and <script type="math/tex">i + 1</script> is enlarged to <script type="math/tex">N</script>, where <script type="math/tex">i \in [0, a + l - 1)</script>.
The sequence becomes <script type="math/tex">[a \cdot N, (a + 1) \cdot N, (a + 2) \cdot N, \ldots, (a + l - 1) \cdot N]</script>.
By padding <script type="math/tex">0</script>, <script type="math/tex">1, 2, \ldots , N-1</script> to the gaps between each value
in <script type="math/tex">[a \cdot N, (a + 1) \cdot N, (a + 2) \cdot N, \ldots, (a + l - 1) \cdot N]</script>,
The sequence becomes <script type="math/tex">[a \cdot N, a \cdot N + 1, a \cdot N + 2, \ldots, (a + l) \cdot N  - 1)]</script>.
This is all the values in <script type="math/tex">[a, (a + l) \cdot N)</script>. 
In other words, the sequence containing all the values in <script type="math/tex">[a, a + l)</script>
can be enlarged to a sequence containing all the values in <script type="math/tex">[a, (a + l) \cdot N)</script>
by applying <code class="highlighter-rouge">enlarge</code>.</p>

<p>If <script type="math/tex">a</script> is <script type="math/tex">0</script> and <script type="math/tex">l</script> is <script type="math/tex">N^p</script>,
then we can <code class="highlighter-rouge">enlarge</code> a <script type="math/tex">[0, N^p)</script>-sequence to a <script type="math/tex">[0, N^{p+1})</script>-sequence.</p>

<p>Based on this idea, the following code</p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="mi">_</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">k</span> <span class="p">{</span>
    <span class="c">// Repeat k times</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">N</span> <span class="o">+</span> <span class="nf">rand</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>is similar to call <code class="highlighter-rouge">k-1</code>-times <code class="highlighter-rouge">enlarge</code></p>

<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// x is [0, 1, ..., N-1]</span>
<span class="k">for</span> <span class="mi">_</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
    <span class="c">// Repeat k-1 times</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nf">enlarge</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>to enlarge a list from <script type="math/tex">[0, 1, ..., N-1]</script> to <script type="math/tex">[0, 1, \ldots, N^k-1]</script>.
The first <code class="highlighter-rouge">x = x * N + rand(N)</code> is to generate a <script type="math/tex">[0, 1, \ldots, N-1]</script> to <code class="highlighter-rouge">x</code>.</p>

<p>See the live demo <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=34b7017dc0fb8c866b6c6a3543aac7c0">here</a>.</p>

<h2 id="compute-rand-m-from-rand-n">Compute Rand <em>M</em> from Rand <em>N</em></h2>

<p>In fact, the method developped for <script type="math/tex">M \leq N</script> case
is a special case in the method for <script type="math/tex">M \gt N</script> case.</p>

<p>Recall the algorithm for <script type="math/tex">M \gt N</script> case:</p>
<ol>
  <li>Find a <script type="math/tex">k</script> such that <script type="math/tex">N^k \geq M</script></li>
  <li>Define <script type="math/tex">Y</script> to the max multiple of <script type="math/tex">M</script> in <script type="math/tex">N^k</script></li>
  <li>Get the random number generator in <script type="math/tex">[0, N^k)</script></li>
  <li>Generate a random number in <script type="math/tex">[0, M)</script>:
    <ol>
      <li>Get a random number <script type="math/tex">x</script> in <script type="math/tex">[0, N^k)</script></li>
      <li>If <script type="math/tex">x</script> is in <script type="math/tex">[0, Y)</script>, then return <script type="math/tex">x % M</script></li>
      <li>Otherwise, repeat from 3-1</li>
    </ol>
  </li>
</ol>

<p>If <script type="math/tex">M \leq N</script>, then <script type="math/tex">k</script> is <script type="math/tex">1</script>!</p>

<p>Thus, the algorithm can be summarized as:</p>
<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Get a random number in [0, m) by a random number generator in [0, n)</span>
<span class="k">fn</span> <span class="nf">rand_m_from_n</span><span class="p">(</span><span class="n">m</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="c">// Get a minimal number p such that n^p &gt;= m</span>
    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="nf">min_pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
    <span class="c">// Get the max multiple of m in [0, n^p)</span>
    <span class="k">let</span> <span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="nf">.pow</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">/</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="n">m</span><span class="p">;</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="c">// Get a random number in [0, n^p)</span>
        <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">rand_pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
        <span class="c">// Return the random number if it is in [0, max)</span>
        <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">max</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">r</span> <span class="o">%</span> <span class="n">m</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c">// Repeating if the random number is in [max, n^p)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">// Get a random from [0, x^y)</span>
<span class="k">fn</span> <span class="nf">rand_pow</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="mi">_</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">y</span> <span class="p">{</span>
        <span class="c">// Repeat y times</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="nf">rand</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">r</span>
<span class="p">}</span>

<span class="c">// Return minimal k such that x^k &gt;= y</span>
<span class="k">fn</span> <span class="nf">min_pow</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">u32</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="p">(</span><span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="nf">.log</span><span class="p">(</span><span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">x</span><span class="p">))</span><span class="nf">.ceil</span><span class="p">())</span> <span class="k">as</span> <span class="nb">u32</span>
<span class="p">}</span>
</code></pre></div></div>

<p>See the live demo <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d3baaff82b2a5480cdbda41bef6e2282" title="Compute Rand([0, m)) from Rand([0, n)), where m, n are integers">here</a>.</p>

<h3 id="if-n-is-2">If <em>N</em> is 2</h3>
<p>To get the random number in <script type="math/tex">[0, 2^k)</script> where <script type="math/tex">k \in \mathbb{N}</script>,
one mentionable trick is to replace</p>
<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="nf">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>
<p>by</p>
<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="p">|</span> <span class="nf">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>
<p>when <script type="math/tex">N = 2</script>.</p>

<p>On the other hand, we donâ€™t need to find the max multiple of <script type="math/tex">x</script> in <script type="math/tex">[0, 2^p)</script>,
where <script type="math/tex">p</script> is the minimal number such that <script type="math/tex">2^p \geq x</script>.
It doesnâ€™t exist! No multiple of <script type="math/tex">x</script> is smaller than <script type="math/tex">2^p</script>.
If it exists, it is at least <script type="math/tex">2x</script>, and it implies there is a <script type="math/tex">2x \leq 2^p</script>.
However, if <script type="math/tex">2x \leq 2^p</script>, then <script type="math/tex">x \leq 2^{p-1}</script> rather than <script type="math/tex">x \leq 2^p</script>!</p>

<p>As a result, the program is:</p>
<div class="language-rs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Get a random number in [0, x) by a random number generator in [0, 1]</span>
<span class="k">fn</span> <span class="nf">rand_from_2</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="c">// Get a minimal number p such that 2^p &gt;= x</span>
    <span class="k">let</span> <span class="n">p</span> <span class="o">=</span> <span class="nf">min_pow</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="c">// Get a random number in [0, 2^p)</span>
        <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">rand_pow</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
        <span class="c">// Return the random number if it is in [0, x)</span>
        <span class="k">if</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c">// Repeating if the random number is in [x, 2^p)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">// Get a random from [0, 2^k)</span>
<span class="k">fn</span> <span class="nf">rand_pow</span><span class="p">(</span><span class="n">k</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="k">assert</span><span class="o">!</span><span class="p">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="mi">_</span> <span class="n">in</span> <span class="mi">0</span><span class="o">..</span><span class="n">k</span> <span class="p">{</span>
        <span class="c">// Repeat k times</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="p">|</span> <span class="nf">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">r</span>
<span class="p">}</span>

<span class="c">// Return minimal k such that 2^k &gt;= x</span>
<span class="k">fn</span> <span class="nf">min_pow</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">u32</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">u32</span> <span class="p">{</span>
    <span class="p">(</span><span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="nf">.log</span><span class="p">(</span><span class="nn">f64</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span><span class="nf">.ceil</span><span class="p">())</span> <span class="k">as</span> <span class="nb">u32</span>
<span class="p">}</span>
</code></pre></div></div>

<p>See the live demo <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5aa2d3ae1fe8e528628ca6fafbed5b86" title="Compute Rand([0, k)) from Rand([0, 1]), where m, n are integers">here</a>.</p>

<h3 id="how-to-check-if-the-distribution-is-uniform">How to check if the distribution is uniform</h3>
<p>One way to check if the distrubution of a random number generator is uniform
is to apply <a href="https://en.wikipedia.org/wiki/Chi-squared_test"><em>chi square test</em></a>.
The discussion can be found <a href="https://math.stackexchange.com/questions/2435/is-there-a-simple-test-for-uniform-distributions">here</a>.
The <a href="https://www.johndcook.com/Beautiful_Testing_ch10.pdf">Testing a Random Number Generator</a> chapter
in <em>John D. Cook</em>â€™s <em>Beautiful Testing</em> is also a great reference to read.</p>

<!-- [rand_big_from_small]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fb12e41948db39ebf49340a0a151529e "Compute Rand([0, b)) from Rand([0, s)), where b, s are integers and b >= s" -->
<!-- [rand_m_from_n]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ad02e341de49665aeef118bdbb10aae9 "Compute Rand([0, m)) from Rand([0, n)), where m, n are integers" -->

:ET