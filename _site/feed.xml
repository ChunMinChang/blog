<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-13T23:49:01+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Peak Up</title><subtitle>keep advancing</subtitle><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><entry><title type="html">Cubeb Oxidation on MacOS</title><link href="http://localhost:4000/post/cubeb-oxidation-on-macos" rel="alternate" type="text/html" title="Cubeb Oxidation on MacOS" /><published>2020-04-13T00:00:00+08:00</published><updated>2020-04-13T00:00:00+08:00</updated><id>http://localhost:4000/post/cubeb-oxidation-on-macos</id><content type="html" xml:base="http://localhost:4000/post/cubeb-oxidation-on-macos">&lt;p&gt;A summary of the &lt;em&gt;C-to-Rust&lt;/em&gt; rewriting work for Firefox’s audio library on Mac OS.&lt;/p&gt;

&lt;!--read more--&gt;

&lt;p&gt;This post aims to share some experience of rewriting a library from &lt;em&gt;C/C++&lt;/em&gt; into &lt;em&gt;Rust&lt;/em&gt;.
In this post, I am going to summarize the achievements
of rewriting the Firefox’s audio library, named &lt;a href=&quot;https://github.com/kinetiknz/cubeb&quot;&gt;&lt;em&gt;Cubeb&lt;/em&gt;&lt;/a&gt;,
from &lt;a href=&quot;https://github.com/kinetiknz/cubeb/blob/master/src/cubeb_audiounit.cpp&quot;&gt;&lt;em&gt;C&lt;/em&gt;&lt;/a&gt; into &lt;a href=&quot;https://github.com/ChunMinChang/cubeb-coreaudio-rs&quot;&gt;&lt;em&gt;Rust&lt;/em&gt;&lt;/a&gt;.
More story will be shared in the following posts.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Solve &lt;em&gt;6&lt;/em&gt; data racing issues discovered by enlarging the test coverage
    &lt;ul&gt;
      &lt;li&gt;Some issues exist for ages but their causes are not easy to be identified&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Boost the performance to &lt;em&gt;35x&lt;/em&gt; faster when starting multiple streams simultaneously
    &lt;ul&gt;
      &lt;li&gt;A happy side effect when fixing data racing issues&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hunt and fix &lt;em&gt;3&lt;/em&gt; memory leaks&lt;/li&gt;
  &lt;li&gt;The test coverage is enlarged to almost 80%
    &lt;ul&gt;
      &lt;li&gt;The left 20% are mostly logs&lt;/li&gt;
      &lt;li&gt;The amount of the regression bugs is pretty low:
        &lt;ul&gt;
          &lt;li&gt;For now, only &lt;em&gt;5&lt;/em&gt; bugs are introduced by using the new &lt;em&gt;Rust&lt;/em&gt; API&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-racing-issues&quot;&gt;Data-racing issues&lt;/h3&gt;

&lt;p&gt;The data-racing issues could be naturally detected
since all the tests within &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo test&lt;/code&gt; are run in parallel by default.&lt;/p&gt;

&lt;p&gt;The audio library is heavily threaded code.
It is based on various system APIs that may use &lt;em&gt;mutex&lt;/em&gt; internally
to query or update the device-related settings.
In addition, the library API can be called on different threads anytime.&lt;/p&gt;

&lt;p&gt;In the past, most of the data-racing issues are found
by investigating the bug reported by Firefox users
at the time when the code is already shipped to the wild.&lt;/p&gt;

&lt;p&gt;Detecting data-racing issues effectively is a hard topic.
However, &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo test&lt;/code&gt; framework lowers the barriers.&lt;/p&gt;

&lt;p&gt;All the tests within &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo test&lt;/code&gt; are run in parallel by default,
which means there is no need to write the custom code to run the tests
on different threads. The tests will be executed on the different threads automatically.
As a result, the problems caused by data-racing emerge much more frequently,
even when just running the unit tests.
It can show a surprising fact
that some of the APIs cannot be run at the same time.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;The performance for starting multiple streams is boosted to &lt;em&gt;35x&lt;/em&gt; faster
after fixing the data-racing issues.&lt;/p&gt;

&lt;p&gt;Actually, this achievement is unexpected.
Performance improvement is not included in the goals for this rewriting project
but it natually happens.
(The goal is simply set to &lt;em&gt;do-not-cause-performance-regression&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;The following figure list the performance measurements when starting multiple streams
at the same time on my &lt;em&gt;MacBook Pro 2017&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/posts/cubeb-oxidation-performance-output.svg&quot; alt=&quot;Performance (ms)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(see all the measurement data &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1rEKN0njYeSxyIqXsw3S2qUJwj5i-DlAA3cBvVKOT5J4/edit?usp=sharing&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There are 4 different backends in the test:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;span style=&quot;color:#4285f4&quot;&gt;Blue&lt;/span&gt;: The original &lt;em&gt;C&lt;/em&gt; backend&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#db4437&quot;&gt;Red&lt;/span&gt;: The first workable &lt;em&gt;Rust&lt;/em&gt; backend rewritten from &lt;em&gt;C&lt;/em&gt; code on a &lt;em&gt;line-by-line&lt;/em&gt; basis
    &lt;ul&gt;
      &lt;li&gt;It rewrites all the lines in a as-same-as-possible way&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#f4b400&quot;&gt;Yellow&lt;/span&gt;: The version honors &lt;em&gt;Rust&lt;/em&gt; style first
    &lt;ul&gt;
      &lt;li&gt;It rewrites many abnormal &lt;em&gt;Rust&lt;/em&gt; code translated plainly from &lt;em&gt;C&lt;/em&gt; code&lt;/li&gt;
      &lt;li&gt;To replace a custom mutex translated from &lt;em&gt;C&lt;/em&gt; code,
 some APIs are reimplemented with a gloabl task queue or &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#0f9d58&quot;&gt;Green&lt;/span&gt;: The version using stream-local task queues instead of a global task queue&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are some fun findings on the above figure.&lt;/p&gt;

&lt;h4 id=&quot;rewriting-the-code-from-c-to-rust-wont-improve-the-performance&quot;&gt;Rewriting the code from &lt;em&gt;C&lt;/em&gt; to &lt;em&gt;Rust&lt;/em&gt; won’t improve the performance&lt;/h4&gt;

&lt;p&gt;There is no much performance differences between &lt;em&gt;1&lt;/em&gt; and &lt;em&gt;2&lt;/em&gt;.
If the &lt;em&gt;Rust&lt;/em&gt; code is implemented in a similar way as what &lt;em&gt;C&lt;/em&gt; code does,
then their performances are roughly equal.&lt;/p&gt;

&lt;p&gt;This is understandable.
The perofrmance won’t be soared if the code are run in the same or similar way.&lt;/p&gt;

&lt;h4 id=&quot;but-if-every-line-honors-the-rust-rule-the-performance-improve&quot;&gt;But if every line honors the &lt;em&gt;Rust&lt;/em&gt; rule, the performance improve&lt;/h4&gt;

&lt;p&gt;The figure shows the performance improve a bit when the implementation
goes from &lt;em&gt;2&lt;/em&gt; to &lt;em&gt;3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If the &lt;em&gt;Rust&lt;/em&gt; code and the &lt;em&gt;C&lt;/em&gt; code implement an idea in the same way,
their performances won’t get much differences since the machine code generated
from both languages might be similar.&lt;/p&gt;

&lt;p&gt;However, when applying the &lt;em&gt;Rust&lt;/em&gt;’s &lt;em&gt;stricter-than-C&lt;/em&gt; rules,
the performance may be improved.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rust&lt;/em&gt; has strict rules for the &lt;em&gt;ownership&lt;/em&gt;, &lt;em&gt;borrowing&lt;/em&gt;,…etc
to force the developers to think their code carefully
and provide well-designed system libraries
that lead to writing code in a good style.
In this project, it turns out those strict rules also lead to better performances.&lt;/p&gt;

&lt;p&gt;Those limits ends up helping us to find a better way to implement the library APIs.
The code translated from &lt;em&gt;C&lt;/em&gt; plainly against the &lt;em&gt;Rust&lt;/em&gt;’s rules
is implemented in another way to make the &lt;em&gt;Rust&lt;/em&gt; compiler happy.
The story is around removing the custom &lt;em&gt;mutex&lt;/em&gt; translated from &lt;em&gt;C&lt;/em&gt;.
At the end, in the version &lt;em&gt;3&lt;/em&gt;, some APIs replace that custom &lt;em&gt;mutex&lt;/em&gt;
by &lt;em&gt;Rust&lt;/em&gt;’s standard &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex&amp;lt;T&amp;gt;&lt;/code&gt;; some APIs are re-designed
to use a global task queue instead of using the custom &lt;em&gt;mutex&lt;/em&gt;
and so the performance is prompted a bit then.&lt;/p&gt;

&lt;p&gt;After replacing using custom &lt;em&gt;mutex&lt;/em&gt; by using a gloabl task queue,
it’s clear to see the task queue can become stream-local instead of &lt;em&gt;gloabl&lt;/em&gt;
so here comes version &lt;em&gt;4&lt;/em&gt;.
By doing so, some data-racing issues can be avoided at the same time.
Thus, the speed for starting multiple streams simultaneously is much faster.&lt;/p&gt;

&lt;p&gt;To be fair, starting multiple streams simultaneously is not really a common case,
so our developers didn’t pay too much attention on it before.&lt;/p&gt;

&lt;p&gt;But the point needs to be highlighted is:
Even I didn’t pay attention on prompting the performance,
it naturally happens! This is amazing!&lt;/p&gt;

&lt;h3 id=&quot;memory-leaks&quot;&gt;Memory leaks&lt;/h3&gt;

&lt;p&gt;Rewriting the code in a different language gives developer a chance to review:
How we manage the memory across API calls?
The memory created and lent outside via one API needs to be
retrieved and destroyed properly in another API
since the memory allocator used in the library
may be different from the call sites.&lt;/p&gt;

&lt;p&gt;Pairing the memory allocation and deallocation in the APIs counts on the human eyes
so there is always a chance to miss some spots.&lt;/p&gt;

&lt;p&gt;Fortunately, the &lt;em&gt;LeakSanitizer&lt;/em&gt; can be enabled easily in &lt;em&gt;Rust Nightly&lt;/em&gt; by
&lt;code class=&quot;highlighter-rouge&quot;&gt;RUSTFLAGS=&quot;-Z sanitizer=leak&quot;&lt;/code&gt; (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;RUSTFLAGS=&quot;-Z sanitizer=leak&quot; cargo test&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Memory leaks can also be hunted by running tests within &lt;em&gt;Xcode’s Instruments&lt;/em&gt;.
It’s a very powerful tool that can help identifying where the memory leaks are.
&lt;em&gt;Xcode’s Instruments&lt;/em&gt; would need a &lt;em&gt;executable&lt;/em&gt; to run tests.
The good news is the &lt;em&gt;executable&lt;/em&gt; generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo test&lt;/code&gt;
can be loaded to &lt;em&gt;Xcode’s Instruments&lt;/em&gt; easily.&lt;/p&gt;

&lt;h3 id=&quot;test-coverage&quot;&gt;Test coverage&lt;/h3&gt;

&lt;p&gt;The test cases are the founding blocks to build the above achievements.
The data-racing issues can be detected by running tests
on different threads at the same time by simply calling &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo test&lt;/code&gt;.
Performance can be watched by running benchmark test within &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo bench&lt;/code&gt;.
Memory leaks and other memory issues can be hunted by running tests with
the &lt;a href=&quot;https://github.com/google/sanitizers&quot;&gt;sanitizers&lt;/a&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;RUSTFLAGS=&quot;-Z sanitizer=&amp;lt;SAN_NAME&amp;gt;&quot; cargo test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As long as the test cases are written properly,
&lt;em&gt;cargo&lt;/em&gt; frameworks provide enough supports for what developers need.&lt;/p&gt;

&lt;p&gt;Enlarging the test-coverage to discover the problems earlier
is one of the goal of the &lt;em&gt;C-to-Rust&lt;/em&gt; rewriting project.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/mozilla/grcov&quot;&gt;grcov&lt;/a&gt; is a convenient tool that help monitoring the test coverage in our code.
It can show the test-coverage status of the &lt;em&gt;Rust&lt;/em&gt; project in a less-than-10-line &lt;a href=&quot;https://github.com/ChunMinChang/cubeb-coreaudio-rs/commit/2e2266ec4106141d4b0d95fd1b3f77ecef27d00d&quot;&gt;script&lt;/a&gt;.
In this project, the 79.2% lines (in &lt;a href=&quot;https://github.com/ChunMinChang/cubeb-coreaudio-rs/tree/2e2266ec4106141d4b0d95fd1b3f77ecef27d00d/src/backend&quot;&gt;src/backend&lt;/a&gt;) are covered within the tests.
The left 20.8% code are mostly logs printed when turning on a preference
so most of the product-level code are covered.&lt;/p&gt;

&lt;p&gt;For now, only &lt;em&gt;5&lt;/em&gt; bugs are intorduced by the new &lt;em&gt;Rust&lt;/em&gt; backend itself.
Most of the problem in the audio library occur in the original C backend as well.
By enlarging the test coverage, many bugs are found before the code is shipped to the wild.&lt;/p&gt;

&lt;h3 id=&quot;conculsion&quot;&gt;Conculsion&lt;/h3&gt;

&lt;p&gt;The experience I learned can be summarized in just one sentence:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Life is short, use &lt;em&gt;Rust&lt;/em&gt;!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Media&quot;]" /><category term="Firefox" /><summary type="html">A summary of the C-to-Rust rewriting work for Firefox’s audio library on Mac OS.</summary></entry><entry><title type="html">LRU Table</title><link href="http://localhost:4000/post/lru-table" rel="alternate" type="text/html" title="LRU Table" /><published>2020-03-20T00:00:00+08:00</published><updated>2020-03-20T00:00:00+08:00</updated><id>http://localhost:4000/post/lru-table</id><content type="html" xml:base="http://localhost:4000/post/lru-table">&lt;p&gt;&lt;em&gt;LRU(Least Recently Used)&lt;/em&gt; table is a simple data structure
that is composed of &lt;em&gt;hash table&lt;/em&gt; and &lt;em&gt;linked list&lt;/em&gt;.
The &lt;em&gt;insert&lt;/em&gt;, &lt;em&gt;erase&lt;/em&gt;, &lt;em&gt;lookup/search&lt;/em&gt; can be done naturally in &lt;em&gt;O(1)&lt;/em&gt;
by its &lt;em&gt;hash-table&lt;/em&gt; part. But the best thing is,
it can return the &lt;em&gt;least&lt;/em&gt; or &lt;em&gt;most&lt;/em&gt; recently used data in &lt;em&gt;O(1)&lt;/em&gt;
by the its &lt;em&gt;linked-list&lt;/em&gt; in a &lt;em&gt;least-to-most&lt;/em&gt; recently used order.&lt;/p&gt;

&lt;!--read more--&gt;

&lt;h1 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h1&gt;

&lt;p&gt;There are several use cases&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(LRU) cache:
A data cache with limited capacity that only cache the most recently touched &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;-element&lt;/li&gt;
  &lt;li&gt;Focus problem:
Keep tracking the touched elements, in a least-to-most recently used order
    &lt;ul&gt;
      &lt;li&gt;For example, in browser, we may want to prioritize the media elements by the touched-by-user order&lt;/li&gt;
      &lt;li&gt;We can give user a way for a user to control the last touched media element.
One media element at a time.&lt;/li&gt;
      &lt;li&gt;If the last touched media element is destroyed,
then the user can control the second-last touched media element, and so on.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The real worl use case is a &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:media/blink/multibuffer.h;l=198;drc=d9b91db0b32bcaed524db17b05f614c7e86326bc?originalUrl=https:%2F%2Fcs.chromium.org%2F&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mediabuffer&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:media/blink/lru.h?q=lru&amp;amp;ss=chromium&amp;amp;originalUrl=https:%2F%2Fcs.chromium.org%2F&quot;&gt;&lt;em&gt;LRU&lt;/em&gt; mechanism&lt;/a&gt; in &lt;em&gt;chromium&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;sample-code&quot;&gt;Sample Code&lt;/h1&gt;

&lt;h2 id=&quot;a-simple-lru-table&quot;&gt;A Simple &lt;em&gt;LRU&lt;/em&gt; Table&lt;/h2&gt;

&lt;noscript&gt;&lt;pre&gt;#ifndef LRU_H
#define LRU_H

#include &amp;lt;cassert&amp;gt;
#include &amp;lt;list&amp;gt;
#include &amp;lt;optional&amp;gt;
#include &amp;lt;unordered_map&amp;gt;

#ifdef LRU_DEBUG
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iterator&amp;gt;
#endif  // LRU_DEBUG

template &amp;lt;class T&amp;gt;
class LRU {
 public:
  LRU() {}
  ~LRU() {}

  std::optional&amp;lt;T&amp;gt; least_recently_used() {
    return list.empty() ? std::nullopt : std::make_optional(list.back());
  }

  std::optional&amp;lt;T&amp;gt; most_recently_used() {
    return list.empty() ? std::nullopt : std::make_optional(list.front());
  }

  void use(const T&amp;amp; item) {
    if (contains(item)) {
      erase(item);
    }
    insert(item);
  }

  void insert(const T&amp;amp; item) {
    assert(!contains(item));
    list.emplace_front(item);
    position[item] = list.begin();
  }

  void erase(const T&amp;amp; item) {
    assert(contains(item));
    list.erase(position[item]);
    position.erase(item);
  }

#ifdef LRU_DEBUG
  void display() {
    for (auto i = list.begin(); i != list.end(); ++i) {
      std::cout &amp;lt;&amp;lt; *i;
      if (std::next(i) != list.end()) {
        std::cout &amp;lt;&amp;lt; &amp;quot;, &amp;quot;;
      }
    }
    std::cout &amp;lt;&amp;lt; std::endl;
  }
#endif  // LRU_DEBUG

 private:
  bool contains(const T&amp;amp; item) { return position.find(item) != position.end(); }

  std::list&amp;lt;T&amp;gt; list;
  std::unordered_map&amp;lt;T, typename std::list&amp;lt;T&amp;gt;::iterator&amp;gt; position;
};

#endif  // LRU_H&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/0ea1c445103452d88664534443e2b8fa.js?file=lru.h&quot;&gt; &lt;/script&gt;

&lt;p&gt;See the files on &lt;a href=&quot;https://gist.github.com/ChunMinChang/0ea1c445103452d88664534443e2b8fa&quot;&gt;gist here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-lru-table-with-key-value-pair&quot;&gt;A &lt;em&gt;LRU&lt;/em&gt; table with Key-Value Pair&lt;/h2&gt;

&lt;noscript&gt;&lt;pre&gt;#ifndef LRU_TABLE_H
#define LRU_TABLE_H

#include &amp;lt;list&amp;gt;
#include &amp;lt;optional&amp;gt;
#include &amp;lt;unordered_map&amp;gt;
#include &amp;lt;utility&amp;gt;

#ifdef LRU_TABLE_DEBUG
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iterator&amp;gt;
#endif  // LRU_TABLE_DEBUG

template &amp;lt;class K, class V&amp;gt;
class LRUTable {
  typedef std::list&amp;lt;std::pair&amp;lt;K, V&amp;gt;&amp;gt; List;
  typedef std::unordered_map&amp;lt;K, typename List::iterator&amp;gt; Position;

 public:
  LRUTable() {}
  ~LRUTable() {}

  std::optional&amp;lt;std::pair&amp;lt;K, V&amp;gt;&amp;gt; least_recently_used() {
    return list.empty() ? std::nullopt : std::make_optional(list.back());
  }

  std::optional&amp;lt;std::pair&amp;lt;K, V&amp;gt;&amp;gt; most_recently_used() {
    return list.empty() ? std::nullopt : std::make_optional(list.front());
  }

  std::optional&amp;lt;V&amp;gt; lookup(K key) {
    auto pos = position.find(key);
    if (pos == position.end()) {
      return std::nullopt;
    }

    move_to_front(pos);
    typename List::iterator&amp;amp; it = pos-&amp;gt;second;
    return std::make_optional(it-&amp;gt;second);
  }

  void insert(K key, V value) {
    auto pos = position.find(key);
    // Insert a new item in the front
    if (pos == position.end()) {
      list.emplace_front(std::make_pair(key, value));
      position[key] = list.begin();
      return;
    }

    // Otherwise, update the value and move it to the front
    typename List::iterator&amp;amp; it = pos-&amp;gt;second;
    it-&amp;gt;second = value;
    move_to_front(pos);
  }

  bool erase(K key) {
    auto pos = position.find(key);
    if (pos == position.end()) {
      return false;
    }

    list.erase(pos-&amp;gt;second);
    position.erase(pos);
    return true;
  }

#ifdef LRU_TABLE_DEBUG
  void display() {
    for (auto i = list.begin(); i != list.end(); ++i) {
      std::cout &amp;lt;&amp;lt; &amp;quot;&amp;lt;&amp;quot; &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &amp;quot;, &amp;quot; &amp;lt;&amp;lt; i-&amp;gt;second &amp;lt;&amp;lt; &amp;quot;&amp;gt;&amp;quot;;
      if (std::next(i) != list.end()) {
        std::cout &amp;lt;&amp;lt; &amp;quot;, &amp;quot;;
      }
    }
    std::cout &amp;lt;&amp;lt; std::endl;
  }
#endif  // LRU_TABLE_DEBUG

 private:
  void move_to_front(typename Position::iterator&amp;amp; it) {
    list.splice(list.begin(), list, it-&amp;gt;second);
    it-&amp;gt;second = list.begin();
  }

  List list;
  Position position;
};

#endif  // LRU_TABLE_H&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/d5a9229ff2bc5ba55385e0b601d43581.js?file=lru_table.h&quot;&gt; &lt;/script&gt;

&lt;p&gt;See the files on &lt;a href=&quot;https://gist.github.com/ChunMinChang/d5a9229ff2bc5ba55385e0b601d43581&quot;&gt;gist here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Data Structure&quot;]" /><category term="LRU" /><category term="Common programming model" /><category term="hash table" /><category term="linked list" /><summary type="html">LRU(Least Recently Used) table is a simple data structure that is composed of hash table and linked list. The insert, erase, lookup/search can be done naturally in O(1) by its hash-table part. But the best thing is, it can return the least or most recently used data in O(1) by the its linked-list in a least-to-most recently used order.</summary></entry><entry><title type="html">Grandpa’s American Dream</title><link href="http://localhost:4000/post/grandpa-s-american-dream" rel="alternate" type="text/html" title="Grandpa’s American Dream" /><published>2019-07-21T00:00:00+08:00</published><updated>2019-07-21T00:00:00+08:00</updated><id>http://localhost:4000/post/grandpa-s-american-dream</id><content type="html" xml:base="http://localhost:4000/post/grandpa-s-american-dream">&lt;p&gt;My very first memory of my grandpa is that he stepped awkwardly in the hall of my preschool. He picked me up everyday. I lived with my grandparents before going to university.&lt;/p&gt;

&lt;p&gt;I am the favorite grandchild of my grandpa, although I am not the firstborn grandson. I am the second one. The firstborn son is considered the most important son in the family. However, I am the only one grandson that can speak Taiwanese, which is my grandpa’s native language and also mine. Speaking Taiwanese in public was illegal in Taiwan many years ago due to political issues and that’s one of the reason why many young people in Taiwan cannot speak Taiwanese.&lt;/p&gt;

&lt;p&gt;My grandpa always wants me to get a Phd degree in the U.S. because that is his American dream. His highest education is elementary school. If you only graduated from elementary school, the life would not be easy. Having a Phd degree in the United States means having a good life in a free world for him. (However, I never try it. I was busy making money to pay bills.)&lt;/p&gt;

&lt;p&gt;About one year ago, somehow I got a job offer to work in the the United States. I took that chance and moved here to start a new life. My grandpa was so happy about that. He thought I might be able to achieve his American dream.&lt;/p&gt;

&lt;p&gt;Three months later after moving here, in middle October, I got a phone call from my mom. She said: “Your grandpa may be dying. He cannot remember things. He is lying in bed all day and most of the time he is in sleep. We don’t know how long this will last. He is too old.”&lt;/p&gt;

&lt;p&gt;After hanging up the phone, I started searching the flight ticket back to Taiwan. It’s bloody expensive and I don’t have many time-offs. I just started my new job here and I was assigned to a challenging project. I don’t want to mess it up. It’s my first project of my first job in the United States. So I booked the ticket in Thanksgiving days.&lt;/p&gt;

&lt;p&gt;I called home every week to check my grandpa. However, there was only one time he was awake. I had a video chat with him. During our chat, he looked the camera, and said: “The girl next to you is pretty. You should marry her.”. I said “She is my wife, already”. Then he laughed and said he couldn’t
remember things these days. Then he said he was tired, so we ended our chat. A few minutes later, my mom called me again and said: “Your grandpa asks me to push you for a Phd”, and I just laughed.&lt;/p&gt;

&lt;p&gt;Two weeks later, my grandpa passed away. I really regretted I was not being there with him. I rearranged an earlier ticket back to Taiwan.&lt;/p&gt;

&lt;p&gt;After funeral, I told to my mom that I was truly sorry I was not being there with him. But my mom said: “That’s fine. You are not the firstborn son. It’s ok.”. Her response really surprised me. I really don’t know what it mean actually. However, it makes me think: “Did my grandpa care about that? What does my grandpa care?”. I don’t know. I still don’t have an answer today. But one thing for sure is that I will have a better life than his.&lt;/p&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="Life" /><summary type="html">My very first memory of my grandpa is that he stepped awkwardly in the hall of my preschool. He picked me up everyday. I lived with my grandparents before going to university. I am the favorite grandchild of my grandpa, although I am not the firstborn grandson. I am the second one. The firstborn son is considered the most important son in the family. However, I am the only one grandson that can speak Taiwanese, which is my grandpa’s native language and also mine. Speaking Taiwanese in public was illegal in Taiwan many years ago due to political issues and that’s one of the reason why many young people in Taiwan cannot speak Taiwanese. My grandpa always wants me to get a Phd degree in the U.S. because that is his American dream. His highest education is elementary school. If you only graduated from elementary school, the life would not be easy. Having a Phd degree in the United States means having a good life in a free world for him. (However, I never try it. I was busy making money to pay bills.) About one year ago, somehow I got a job offer to work in the the United States. I took that chance and moved here to start a new life. My grandpa was so happy about that. He thought I might be able to achieve his American dream. Three months later after moving here, in middle October, I got a phone call from my mom. She said: “Your grandpa may be dying. He cannot remember things. He is lying in bed all day and most of the time he is in sleep. We don’t know how long this will last. He is too old.” After hanging up the phone, I started searching the flight ticket back to Taiwan. It’s bloody expensive and I don’t have many time-offs. I just started my new job here and I was assigned to a challenging project. I don’t want to mess it up. It’s my first project of my first job in the United States. So I booked the ticket in Thanksgiving days. I called home every week to check my grandpa. However, there was only one time he was awake. I had a video chat with him. During our chat, he looked the camera, and said: “The girl next to you is pretty. You should marry her.”. I said “She is my wife, already”. Then he laughed and said he couldn’t remember things these days. Then he said he was tired, so we ended our chat. A few minutes later, my mom called me again and said: “Your grandpa asks me to push you for a Phd”, and I just laughed. Two weeks later, my grandpa passed away. I really regretted I was not being there with him. I rearranged an earlier ticket back to Taiwan. After funeral, I told to my mom that I was truly sorry I was not being there with him. But my mom said: “That’s fine. You are not the firstborn son. It’s ok.”. Her response really surprised me. I really don’t know what it mean actually. However, it makes me think: “Did my grandpa care about that? What does my grandpa care?”. I don’t know. I still don’t have an answer today. But one thing for sure is that I will have a better life than his.</summary></entry><entry><title type="html">Dancing LED</title><link href="http://localhost:4000/post/dancing-led" rel="alternate" type="text/html" title="Dancing LED" /><published>2019-03-03T00:00:00+08:00</published><updated>2019-03-03T00:00:00+08:00</updated><id>http://localhost:4000/post/dancing-led</id><content type="html" xml:base="http://localhost:4000/post/dancing-led">&lt;p&gt;To make some fun in a snowing night,
I built a simple audio reactive LED
that can dance(blink) with the music.&lt;/p&gt;

&lt;p&gt;It’s an easy project for killing time
since the circuit just contains a couple of electronic components.&lt;/p&gt;

&lt;p&gt;I am not a professional electronic engineer.
I cannot guarantee it won’t burn down your house
if you run that circuit all night long.&lt;/p&gt;

&lt;p&gt;I bet you will get much more fun
if you dance with real humans rather than the LED circuit!&lt;/p&gt;

&lt;!--read more--&gt;

&lt;h2 id=&quot;circuit&quot;&gt;Circuit&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../images/posts/audio-reactive-led.png&quot; alt=&quot;&quot; title=&quot;Device selector&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Audio Plugin
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.circuitbasics.com/how-to-hack-a-headphone-jack/&quot;&gt;HOW TO HACK A HEADPHONE JACK&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Tip-Ring-Sleeve: Left, Right, Ground&lt;/li&gt;
          &lt;li&gt;Tip-Ring-Ring-Sleeve: Left, Right, Ground, Microphone&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Power LED via headset jack
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://engineering.stackexchange.com/questions/3648/powering-led-light-using-smartphone-headset-jack&quot;&gt;Powering LED light using smartphone headset jack&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Blink LED to Music by connecting audio signal to transistor
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.instructables.com/id/Blinking-LEDs-to-Music/&quot;&gt;BLINKING LEDS TO MUSIC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.instructables.com/id/Creating-An-Audio-Reactive-LED-Circuit/&quot;&gt;CREATING AN AUDIO-REACTIVE LED CIRCUIT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.instructables.com/id/Music-blinking-LED/&quot;&gt;MUSIC BLINKING LED&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.instructables.com/id/Music-LED-Light-Box/&quot;&gt;MUSIC LED LIGHT BOX&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1TUYNuh-iqQ&quot;&gt;Music LED Light Box Walkthrough&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tQErSCz2NiQ&quot;&gt;Blinking LED lights to music with TIP31 transistor on a breadboard&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3JTSfhakuZ8#t=60s&quot;&gt;DIY - Music LED with TIP31 (Electric diagram in video) - By STE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dyahSDnpZpU#t=70s&quot;&gt;Music sync LED’s - DIY (easy)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://electronics.stackexchange.com/questions/115468/how-to-blink-leds-with-mosfet-in-response-to-music&quot;&gt;How To Blink LED’s with MOSFET in response to Music?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://circuitdigest.com/electronic-circuits/simple-led-music-light&quot;&gt;Music Operated Dancing LEDs (via Microphone)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Blink LED to Music by amplifier and regulator
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.allaboutcircuits.com/projects/make-an-analog-sound-reactive-led-strip/&quot;&gt;Make an Analog Sound Reactive LED Strip&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://electronics.stackexchange.com/questions/36423/driving-leds-from-audio-signal&quot;&gt;Driving LEDs from audio signal&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LED Color Organ: Divides sound into three frequency bands, and emits red, green and blue lights accordingly
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://makezine.com/projects/easy-led-color-organ/&quot;&gt;Easy LED Color Organ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.instructables.com/id/LED-Color-Organ-Triple-Deluxe/&quot;&gt;LED COLOR ORGAN TRIPLE DELUXE&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Turn Light into Sound
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.khanacademy.org/partner-content/exploratorium-ddp/expl-electromagnet/light-to-sound/v/light-to-sound-introduction&quot;&gt;Light into sound introduction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.exploratorium.edu/square_wheels/modulated_led.pdf&quot;&gt;detail&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-bg7ZIelqpA&quot;&gt;Dancing LED Light&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Toy&quot;]" /><category term="Hardware" /><summary type="html">To make some fun in a snowing night, I built a simple audio reactive LED that can dance(blink) with the music. It’s an easy project for killing time since the circuit just contains a couple of electronic components. I am not a professional electronic engineer. I cannot guarantee it won’t burn down your house if you run that circuit all night long. I bet you will get much more fun if you dance with real humans rather than the LED circuit!</summary></entry><entry><title type="html">Compute Rand M from Rand N</title><link href="http://localhost:4000/post/compute-rand-m-from-rand-n" rel="alternate" type="text/html" title="Compute Rand M from Rand N" /><published>2019-02-10T00:00:00+08:00</published><updated>2019-02-10T00:00:00+08:00</updated><id>http://localhost:4000/post/compute-rand-m-from-rand-n</id><content type="html" xml:base="http://localhost:4000/post/compute-rand-m-from-rand-n">&lt;p&gt;How to get a random number in &lt;em&gt;[0, M)&lt;/em&gt; by a random number generator
that randomly throws a number in &lt;em&gt;[0, N)&lt;/em&gt; with equal probability ?&lt;/p&gt;

&lt;!--read more--&gt;

&lt;h1 id=&quot;randm-by-randn&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;Rand(M)&lt;/script&gt; by &lt;script type=&quot;math/tex&quot;&gt;Rand(N)&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;In this post, &lt;script type=&quot;math/tex&quot;&gt;Rand \; K&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;Rand(K)&lt;/script&gt; denotes a random number generator
that produce a integer randomly in &lt;script type=&quot;math/tex&quot;&gt;[0, K)&lt;/script&gt;
(or &lt;script type=&quot;math/tex&quot;&gt;[0, K - 1]&lt;/script&gt;, from &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;K-1&lt;/script&gt; inclusively)
with equal probability.&lt;/p&gt;

&lt;p&gt;We can simply divide this problem into two cases: &lt;script type=&quot;math/tex&quot;&gt;M \leq N&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;M \gt N&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;m-leq-n&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;M \leq N&lt;/script&gt;&lt;/h2&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;M \leq N&lt;/script&gt;, then the range &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt; is in the range &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;.
Therefore, the probability of a number choosed by &lt;script type=&quot;math/tex&quot;&gt;Rand(N)&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;
is same. All of them are &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;number&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;N-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What we want is to develop a method
that can randomly choose a number in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt; with equal probability.
We can leverage this fact.&lt;/p&gt;

&lt;p&gt;The simplest way is to &lt;strong&gt;re-produce&lt;/strong&gt; a number
if the number produced is out of the range we want (&lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;).
That is, if the number produced is in &lt;script type=&quot;math/tex&quot;&gt;[M, N)&lt;/script&gt;,
we &lt;strong&gt;re-generate&lt;/strong&gt; a number.&lt;/p&gt;

&lt;p&gt;Does it work? That’s check the probability for each number.
For each round, the probability we need to re-generate a number is &lt;script type=&quot;math/tex&quot;&gt;\frac{N - M}{N}&lt;/script&gt;.
Hence, the probability to get a number &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; in the &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; round
can be organized as the following table,
where &lt;script type=&quot;math/tex&quot;&gt;i \in [0, M)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;K \in \mathbb{N}&lt;/script&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;round&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{N - M}{N} \cdot \frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;3&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;{(\frac{N - M}{N})}^{2} \cdot \frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;{(\frac{N - M}{N})}^{K-1} \cdot \frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As a result, the probability to get the number &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}
= \frac{1}{N}
+ \frac{N - M}{N} \cdot \frac{1}{N}
+ {(\frac{N - M}{N})}^{2} \cdot \frac{1}{N}
+ \ldots
+ {(\frac{N - M}{N})}^{K-1} \cdot \frac{1}{N}&lt;/script&gt;

&lt;p&gt;This is same for all number &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;i \in [0, M)&lt;/script&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;number&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{k=1}^\infty {(\frac{N - M}{N})}^{k-1} \cdot \frac{1}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;By now, we alreay know how to randomly generate a number in a smaller range
from a random number generator in a bigger range.&lt;/p&gt;

&lt;p&gt;In brief, the algorithm is&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Get a random number &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;If &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;, then return &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Otherwise, repeat from 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following &lt;em&gt;Rust&lt;/em&gt; program is the method we developed above:&lt;/p&gt;

&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Get a random number in [0, s) by a random number generator in [0, b),&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// where both s, b are integers and s &amp;gt; 1, b &amp;gt; 1, s &amp;lt;= b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_small_from_big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Get a random number in [0, b)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Return the random number if it is in [0, s)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeating if the random number is in [s, b)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the live demo &lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=798f79143be66cecd08f81b48a97dd4b&quot; title=&quot;Compute Rand([0, s)) from Rand([0, b)), where b, s are integers and b &amp;gt;= s&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Actually, we could make some improvement for this approach. 
By the above approach, it’s very likely to re-produce the random number 
again and again when &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is much bigger than &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;.
The problem is, the number is only valid when it’s in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;.
When &lt;script type=&quot;math/tex&quot;&gt;M \ll N&lt;/script&gt;, the chance to get a valid random number is very small.
For example, if &lt;script type=&quot;math/tex&quot;&gt;N = 101, M = 2&lt;/script&gt;,
the probability to get a valid number is lower than &lt;script type=&quot;math/tex&quot;&gt;2\%(2/101)&lt;/script&gt;.
The produced number is only valid when it’s &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;.
It’s inefficient.&lt;/p&gt;

&lt;p&gt;A simple solution is to make the number valid in &lt;script type=&quot;math/tex&quot;&gt;[0, k \cdot M)&lt;/script&gt;,
where the &lt;script type=&quot;math/tex&quot;&gt;k \in \mathbb{N}&lt;/script&gt;.
The &lt;script type=&quot;math/tex&quot;&gt;k \cdot M&lt;/script&gt; is the maximal multiple of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;.
If the number is in &lt;script type=&quot;math/tex&quot;&gt;[0, k \cdot M)&lt;/script&gt;,
then we can take the remainder of the produced number divided by &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;
as the produced random number.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;number&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
      &lt;th&gt;evaluated&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M+1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M+2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2M-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2M&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2M+1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2M+2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;kM-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;kM&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;kM+1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;kM+1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;kM+2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;kM+2&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;N-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;N-1&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;evaluated&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;others&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{N - k \cdot M}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As a result, the probability to get the number &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}
= \frac{k}{N}
+ \frac{N - k \cdot M}{N} \cdot \frac{k}{N}
+ {(\frac{N - k \cdot M}{N})}^{2} \cdot \frac{k}{N}
+ \ldots
+ {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}&lt;/script&gt;

&lt;p&gt;This is same for all number &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;i \in [0, M)&lt;/script&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;number&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;M-1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{j=1}^\infty {(\frac{N - k \cdot M}{N})}^{j-1} \cdot \frac{k}{N}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The higher &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; is, the higher probability to get a valid number.
In the above example, if &lt;script type=&quot;math/tex&quot;&gt;N = 101, M = 2&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;k = 50&lt;/script&gt;.
The probability to get a valid number is &lt;script type=&quot;math/tex&quot;&gt;100/101&lt;/script&gt;
since the produced number is valid from &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;99&lt;/script&gt;.
Every even number in &lt;script type=&quot;math/tex&quot;&gt;[0, 100)&lt;/script&gt; (&lt;script type=&quot;math/tex&quot;&gt;0, 2, 4, \dots, 98&lt;/script&gt;)
will be evaluated to &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;
and every odd number in &lt;script type=&quot;math/tex&quot;&gt;[0, 100)&lt;/script&gt; (&lt;script type=&quot;math/tex&quot;&gt;1, 3, 5, \dots, 99&lt;/script&gt;)
will be evaluated to &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;,
since the remainders of the produced even numbers divided by &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;
and odd numbers divided by &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; are &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; respectively.
That is, the probability becomes &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; times.&lt;/p&gt;

&lt;p&gt;To sum up, the algorithm is&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Define &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; to the max multiple of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Get a random number &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;If &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;[0, K)&lt;/script&gt;, then return &lt;script type=&quot;math/tex&quot;&gt;x % M&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Otherwise, repeat from 2&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Get a random number in [0, s) by a random number generator in [0, b),&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// where both s, b are integers and s &amp;gt; 1, b &amp;gt; 1, s &amp;lt;= b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_small_from_big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Get the max multiple of s in [0, b)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Get a random number in [0, b)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Return the random number if it is in [0, max)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeating if the random number is in [max, b)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the live demo &lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=b7f99315bbdfdf475658529be8dc80b8&quot; title=&quot;Compute Rand([0, s)) from Rand([0, b)), where b, s are integers and b &amp;gt;= s&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;m-gt-n&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;M \gt N&lt;/script&gt;&lt;/h2&gt;

&lt;p&gt;However, if &lt;script type=&quot;math/tex&quot;&gt;M \gt N&lt;/script&gt;, our method above doesn’t work,
since the range of &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt; is bigger than &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt; &lt;em&gt;(really? keep reading!)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To get a random number in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;,
we need to &lt;strong&gt;enlarge&lt;/strong&gt; the range of the numbers produced
by the given generator. How to do that ?&lt;/p&gt;

&lt;p&gt;OK, the number of results from the generator is &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; now.
How to enlarge the range of results ?
Should we generate two numbers and do some magic math ?&lt;/p&gt;

&lt;p&gt;How many results we have if we generate two numbers ?
If we see the results as &lt;strong&gt;permutations&lt;/strong&gt;, it’s &lt;script type=&quot;math/tex&quot;&gt;N^2&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;script type=&quot;math/tex&quot;&gt;N = 2&lt;/script&gt;, the results are &lt;script type=&quot;math/tex&quot;&gt;(0, 0), (0, 1), (1, 0), (1, 1)&lt;/script&gt;.
The probability of each result is &lt;script type=&quot;math/tex&quot;&gt;1/4&lt;/script&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;1st&lt;/th&gt;
      &lt;th&gt;2nd&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2} \cdot \frac{1}{2} = \frac{1}{4}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If the results can be mapped from &lt;script type=&quot;math/tex&quot;&gt;(0, 0), (0, 1), (1, 0), (1, 1)&lt;/script&gt;
to &lt;script type=&quot;math/tex&quot;&gt;0, 1, 2, 3&lt;/script&gt;, it means we &lt;strong&gt;have a way&lt;/strong&gt; to enlarge the range of results
from &lt;script type=&quot;math/tex&quot;&gt;[0, 1]&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;[0, 1, 2, 3]&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Well, is it possible to do that ?
If we observe carefully,
it’s natural to map &lt;script type=&quot;math/tex&quot;&gt;(0, 0), (0, 1), (1, 0), (1, 1)&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;0, 1, 2, 3&lt;/script&gt;.
If we see &lt;script type=&quot;math/tex&quot;&gt;00, 01, 10, 11&lt;/script&gt; as binary numbers &lt;script type=&quot;math/tex&quot;&gt;{00}_{2}, {01}_{2}, {10}_{2}, {11}_{2}&lt;/script&gt;,
then they are naturally &lt;script type=&quot;math/tex&quot;&gt;0, 1, 2, 3&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The same approach also works
when we produce two numbers from random number generator whose range is &lt;script type=&quot;math/tex&quot;&gt;[0, 3)&lt;/script&gt;.
There are &lt;script type=&quot;math/tex&quot;&gt;3 \cdot 3 = 9&lt;/script&gt; results: &lt;script type=&quot;math/tex&quot;&gt;(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)&lt;/script&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;1st&lt;/th&gt;
      &lt;th&gt;2nd&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{3} \cdot \frac{1}{3} = \frac{1}{9}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we see them as the &lt;strong&gt;base-&lt;script type=&quot;math/tex&quot;&gt;3&lt;/script&gt;&lt;/strong&gt; numbers, they are naturally &lt;script type=&quot;math/tex&quot;&gt;0, 1, 2, 3, 4, 5, 6, 7, 8&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;By applying this generating-two-numbers approach for a random number generator with range in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;,
the sequential results &lt;script type=&quot;math/tex&quot;&gt;(i, j)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;i, j \in [0, N)&lt;/script&gt;,
can be mapped to &lt;script type=&quot;math/tex&quot;&gt;0, 1, 2, \ldots, N^2 - 1&lt;/script&gt; (range in &lt;script type=&quot;math/tex&quot;&gt;[0, N^2)&lt;/script&gt;)
by treating them as &lt;strong&gt;base-&lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;&lt;/strong&gt; numbers &lt;script type=&quot;math/tex&quot;&gt;{ij}_{N}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;In general, for the random number generator with range in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;,
there are &lt;script type=&quot;math/tex&quot;&gt;N^k&lt;/script&gt; sequential results for producing &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; numbers.
The sequential results are &lt;script type=&quot;math/tex&quot;&gt;(x_0, x_1, \ldots, x_{k-1})&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;x_i \in [0, N)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;i \in [0, k)&lt;/script&gt;.
By taking the sequential results in &lt;strong&gt;base-&lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;&lt;/strong&gt; : &lt;script type=&quot;math/tex&quot;&gt;{(x_0 x_1 \ldots x_{k-1})}_{N}&lt;/script&gt;,
their valus are naturally &lt;script type=&quot;math/tex&quot;&gt;0, 1, 2, \ldots, N^k&lt;/script&gt;.
It is how the &lt;strong&gt;base-&lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;&lt;/strong&gt; number works.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;1st&lt;/th&gt;
      &lt;th&gt;2nd&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;kth&lt;/th&gt;
      &lt;th&gt;probability&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\vdots&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ldots&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;N-1&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When producing &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; numbers by the random number generator with range in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;,
the sequential results &lt;script type=&quot;math/tex&quot;&gt;x_0, x_1, \ldots, x_{k-1}&lt;/script&gt; can be mapped to a number in &lt;script type=&quot;math/tex&quot;&gt;[0, N^k)&lt;/script&gt;
by encoding them as a &lt;strong&gt;base-&lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;&lt;/strong&gt; number &lt;script type=&quot;math/tex&quot;&gt;{(x_0 x_1 \ldots x_{k-1})}_{N}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The idea can be implemented as the following program:&lt;/p&gt;
&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Map the result of (x_0, x_1, ..., x_{k-1})&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// to (x_0 x_1 ... x_{k-1}) in base-N number&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Repeat k times&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are &lt;script type=&quot;math/tex&quot;&gt;N^k&lt;/script&gt; kinds of sequential results for producing &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; numbers.
The probability for each one is &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{N^k}&lt;/script&gt;.
By this approach, we have a way to get one result
in the &lt;script type=&quot;math/tex&quot;&gt;N^k&lt;/script&gt; kinds of sequential results.
That is, we have a way to generate a random number in &lt;script type=&quot;math/tex&quot;&gt;[0, N^k)&lt;/script&gt;
by the random number generator in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The original problem is to find a way to generate a random number in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;
by the random number generator in &lt;script type=&quot;math/tex&quot;&gt;[0, N)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;M \gt N&lt;/script&gt;.
Since we alreay know how to get a random number in a smaller range by
a random number generator in a bigger range
(the method developped in the &lt;script type=&quot;math/tex&quot;&gt;M \leq N&lt;/script&gt; case),
if we can find a &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;N^k \geq M&lt;/script&gt;, then the problem can be solved!&lt;/p&gt;

&lt;p&gt;The &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; can be calculated by &lt;em&gt;logarithm&lt;/em&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N^k \geq M
\Rightarrow k \geq \log_N M&lt;/script&gt;

&lt;p&gt;The corresponding program is:&lt;/p&gt;
&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Return minimal k such that N^k &amp;gt;= M&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M_f64&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N_f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To sum up, if &lt;script type=&quot;math/tex&quot;&gt;M \gt N&lt;/script&gt;, then&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Find a &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;N^k \geq M&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Define &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; to the max multiple of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;N^k&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Get the random number generator in &lt;script type=&quot;math/tex&quot;&gt;[0, N^k)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Generate a random number in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;:
    &lt;ol&gt;
      &lt;li&gt;Get a random number &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;[0, N^k)&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;If &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;[0, Y)&lt;/script&gt;, then return &lt;script type=&quot;math/tex&quot;&gt;x % M&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;Otherwise, repeat from 3-1&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Get a random number in [0, b) by a random number generator in [0, s),&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// where both s, b are integers and s &amp;gt; 1, b &amp;gt; 1, s &amp;lt;= b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_big_from_small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Get a minimal number p such that s^p &amp;gt;= b&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Get the max multiple of b in [0, s^p)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Get a random number in [0, s^p)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Return the random number if it is in [0, max)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeating if the random number is in [max, s^p)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Get a random from [0, x^y)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeat y times&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Return minimal k such that x^k &amp;gt;= y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the live demo &lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=d91510a1d8e25fe29baf0d445d8eb0f4&quot; title=&quot;Compute Rand([0, b)) from Rand([0, s)), where b, s are integers and b &amp;gt;= s&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;enlarge-from-0-1-ldots-n-1-to-0-1-ldots-nk-1&quot;&gt;Enlarge from &lt;script type=&quot;math/tex&quot;&gt;[0, 1, \ldots, N-1]&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;[0, 1, \ldots, N^k-1]&lt;/script&gt;&lt;/h3&gt;

&lt;p&gt;An interesting view to look the line &lt;script type=&quot;math/tex&quot;&gt;x * N + rand(N)&lt;/script&gt; is to think
&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is a &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt; numbers sequence from &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;a + l - 1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;[a, a + 1, a + 2, \ldots, a + l - 1]&lt;/script&gt;
and &lt;script type=&quot;math/tex&quot;&gt;rand(N)&lt;/script&gt; is a list from &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;N-1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;[0, 1, 2, \ldots, N - 1]&lt;/script&gt;.
In this case, &lt;script type=&quot;math/tex&quot;&gt;x * N + rand(N)&lt;/script&gt; is something like&lt;/p&gt;

&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// x is [a, a + 1, a + 2, ..., a + l - 1]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enlarge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offsets&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What &lt;code class=&quot;highlighter-rouge&quot;&gt;enlarge&lt;/code&gt; does is to enlarge a sequence
from &lt;script type=&quot;math/tex&quot;&gt;[a, a + 1, a + 2, \ldots, a + l - 1]&lt;/script&gt;
to &lt;script type=&quot;math/tex&quot;&gt;[a \cdot N, a \cdot N + 1, a \cdot N + 2, \ldots, (a + l) \cdot N  - 1)]&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;By multiplying &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; on each value in &lt;script type=&quot;math/tex&quot;&gt;[a, a + 1, a + 2, \ldots, a + l - 1]&lt;/script&gt;,
the difference between &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;i + 1&lt;/script&gt; is enlarged to &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;i \in [0, a + l - 1)&lt;/script&gt;.
The sequence becomes &lt;script type=&quot;math/tex&quot;&gt;[a \cdot N, (a + 1) \cdot N, (a + 2) \cdot N, \ldots, (a + l - 1) \cdot N]&lt;/script&gt;.
By padding &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;1, 2, \ldots , N-1&lt;/script&gt; to the gaps between each value
in &lt;script type=&quot;math/tex&quot;&gt;[a \cdot N, (a + 1) \cdot N, (a + 2) \cdot N, \ldots, (a + l - 1) \cdot N]&lt;/script&gt;,
The sequence becomes &lt;script type=&quot;math/tex&quot;&gt;[a \cdot N, a \cdot N + 1, a \cdot N + 2, \ldots, (a + l) \cdot N  - 1)]&lt;/script&gt;.
This is all the values in &lt;script type=&quot;math/tex&quot;&gt;[a, (a + l) \cdot N)&lt;/script&gt;. 
In other words, the sequence containing all the values in &lt;script type=&quot;math/tex&quot;&gt;[a, a + l)&lt;/script&gt;
can be enlarged to a sequence containing all the values in &lt;script type=&quot;math/tex&quot;&gt;[a, (a + l) \cdot N)&lt;/script&gt;
by applying &lt;code class=&quot;highlighter-rouge&quot;&gt;enlarge&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;N^p&lt;/script&gt;,
then we can &lt;code class=&quot;highlighter-rouge&quot;&gt;enlarge&lt;/code&gt; a &lt;script type=&quot;math/tex&quot;&gt;[0, N^p)&lt;/script&gt;-sequence to a &lt;script type=&quot;math/tex&quot;&gt;[0, N^{p+1})&lt;/script&gt;-sequence.&lt;/p&gt;

&lt;p&gt;Based on this idea, the following code&lt;/p&gt;

&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Repeat k times&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is similar to call &lt;code class=&quot;highlighter-rouge&quot;&gt;k-1&lt;/code&gt;-times &lt;code class=&quot;highlighter-rouge&quot;&gt;enlarge&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// x is [0, 1, ..., N-1]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Repeat k-1 times&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enlarge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to enlarge a list from &lt;script type=&quot;math/tex&quot;&gt;[0, 1, ..., N-1]&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;[0, 1, \ldots, N^k-1]&lt;/script&gt;.
The first &lt;code class=&quot;highlighter-rouge&quot;&gt;x = x * N + rand(N)&lt;/code&gt; is to generate a &lt;script type=&quot;math/tex&quot;&gt;[0, 1, \ldots, N-1]&lt;/script&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See the live demo &lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=34b7017dc0fb8c866b6c6a3543aac7c0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;compute-rand-m-from-rand-n&quot;&gt;Compute Rand &lt;em&gt;M&lt;/em&gt; from Rand &lt;em&gt;N&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;In fact, the method developped for &lt;script type=&quot;math/tex&quot;&gt;M \leq N&lt;/script&gt; case
is a special case in the method for &lt;script type=&quot;math/tex&quot;&gt;M \gt N&lt;/script&gt; case.&lt;/p&gt;

&lt;p&gt;Recall the algorithm for &lt;script type=&quot;math/tex&quot;&gt;M \gt N&lt;/script&gt; case:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Find a &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;N^k \geq M&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Define &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; to the max multiple of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;N^k&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Get the random number generator in &lt;script type=&quot;math/tex&quot;&gt;[0, N^k)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Generate a random number in &lt;script type=&quot;math/tex&quot;&gt;[0, M)&lt;/script&gt;:
    &lt;ol&gt;
      &lt;li&gt;Get a random number &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;[0, N^k)&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;If &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;[0, Y)&lt;/script&gt;, then return &lt;script type=&quot;math/tex&quot;&gt;x % M&lt;/script&gt;&lt;/li&gt;
      &lt;li&gt;Otherwise, repeat from 3-1&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;M \leq N&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;!&lt;/p&gt;

&lt;p&gt;Thus, the algorithm can be summarized as:&lt;/p&gt;
&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Get a random number in [0, m) by a random number generator in [0, n)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_m_from_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Get a minimal number p such that n^p &amp;gt;= m&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Get the max multiple of m in [0, n^p)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Get a random number in [0, n^p)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Return the random number if it is in [0, max)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeating if the random number is in [max, n^p)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Get a random from [0, x^y)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeat y times&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Return minimal k such that x^k &amp;gt;= y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the live demo &lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=d3baaff82b2a5480cdbda41bef6e2282&quot; title=&quot;Compute Rand([0, m)) from Rand([0, n)), where m, n are integers&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;if-n-is-2&quot;&gt;If &lt;em&gt;N&lt;/em&gt; is 2&lt;/h3&gt;
&lt;p&gt;To get the random number in &lt;script type=&quot;math/tex&quot;&gt;[0, 2^k)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;k \in \mathbb{N}&lt;/script&gt;,
one mentionable trick is to replace&lt;/p&gt;
&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;by&lt;/p&gt;
&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;when &lt;script type=&quot;math/tex&quot;&gt;N = 2&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, we don’t need to find the max multiple of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;[0, 2^p)&lt;/script&gt;,
where &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; is the minimal number such that &lt;script type=&quot;math/tex&quot;&gt;2^p \geq x&lt;/script&gt;.
It doesn’t exist! No multiple of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is smaller than &lt;script type=&quot;math/tex&quot;&gt;2^p&lt;/script&gt;.
If it exists, it is at least &lt;script type=&quot;math/tex&quot;&gt;2x&lt;/script&gt;, and it implies there is a &lt;script type=&quot;math/tex&quot;&gt;2x \leq 2^p&lt;/script&gt;.
However, if &lt;script type=&quot;math/tex&quot;&gt;2x \leq 2^p&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;x \leq 2^{p-1}&lt;/script&gt; rather than &lt;script type=&quot;math/tex&quot;&gt;x \leq 2^p&lt;/script&gt;!&lt;/p&gt;

&lt;p&gt;As a result, the program is:&lt;/p&gt;
&lt;div class=&quot;language-rs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Get a random number in [0, x) by a random number generator in [0, 1]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_from_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Get a minimal number p such that 2^p &amp;gt;= x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Get a random number in [0, 2^p)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Return the random number if it is in [0, x)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeating if the random number is in [x, 2^p)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Get a random from [0, 2^k)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Repeat k times&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Return minimal k such that 2^k &amp;gt;= x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min_pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the live demo &lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=5aa2d3ae1fe8e528628ca6fafbed5b86&quot; title=&quot;Compute Rand([0, k)) from Rand([0, 1]), where m, n are integers&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-to-check-if-the-distribution-is-uniform&quot;&gt;How to check if the distribution is uniform&lt;/h3&gt;
&lt;p&gt;One way to check if the distrubution of a random number generator is uniform
is to apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Chi-squared_test&quot;&gt;&lt;em&gt;chi square test&lt;/em&gt;&lt;/a&gt;.
The discussion can be found &lt;a href=&quot;https://math.stackexchange.com/questions/2435/is-there-a-simple-test-for-uniform-distributions&quot;&gt;here&lt;/a&gt;.
The &lt;a href=&quot;https://www.johndcook.com/Beautiful_Testing_ch10.pdf&quot;&gt;Testing a Random Number Generator&lt;/a&gt; chapter
in &lt;em&gt;John D. Cook&lt;/em&gt;’s &lt;em&gt;Beautiful Testing&lt;/em&gt; is also a great reference to read.&lt;/p&gt;

&lt;!-- [rand_big_from_small]: https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fb12e41948db39ebf49340a0a151529e &quot;Compute Rand([0, b)) from Rand([0, s)), where b, s are integers and b &gt;= s&quot; --&gt;
&lt;!-- [rand_m_from_n]: https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ad02e341de49665aeef118bdbb10aae9 &quot;Compute Rand([0, m)) from Rand([0, n)), where m, n are integers&quot; --&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Puzzle&quot;, &quot;Math&quot;, &quot;Algorithm&quot;]" /><category term="Random" /><category term="Probabilitiy" /><summary type="html">How to get a random number in [0, M) by a random number generator that randomly throws a number in [0, N) with equal probability ?</summary></entry><entry><title type="html">Audio Debugging Resources</title><link href="http://localhost:4000/post/audio-debugging-resources" rel="alternate" type="text/html" title="Audio Debugging Resources" /><published>2019-01-26T00:00:00+08:00</published><updated>2019-01-26T00:00:00+08:00</updated><id>http://localhost:4000/post/audio-debugging-resources</id><content type="html" xml:base="http://localhost:4000/post/audio-debugging-resources">&lt;p&gt;The resources collection for debugging audio issues.&lt;/p&gt;

&lt;!--read more--&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Firefox
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;audio-device-information-on-firefox&quot; title=&quot;Media info on about:support&quot;&gt;about:support&lt;/a&gt;: Show audio device info on Firefox page.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/devtools-media-panel/&quot; title=&quot;DevTools Media Panel&quot;&gt;DevTools Media Panel&lt;/a&gt; (&lt;a href=&quot;https://github.com/mjfroman/media-devtools-panel-react&quot; title=&quot;Media Panel Devtool&quot;&gt;source code&lt;/a&gt;): An additional panel in the Web Developer Tools displaying technical information about media elements and webrtc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FFmpeg: A powerful tool to record, convert and stream audio and video.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.ffmpeg.org/&quot; title=&quot;FFmpeg website&quot;&gt;website&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/FFmpeg/FFmpeg&quot; title=&quot;FFmpeg source code&quot;&gt;source code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://trac.ffmpeg.org/wiki/CompilationGuide&quot; title=&quot;Compile FFmpeg&quot;&gt;Compilation Guide&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/akhudek/Soundflower&quot; title=&quot;Soundflower&quot;&gt;Soundflower&lt;/a&gt;: Create virtual (multiple channels) audio device on maxOS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reaper.fm/&quot;&gt;REAPER&lt;/a&gt;: Digital audio workstation for recording, mixing, …, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;audio-device-selector&quot; title=&quot;Audio Device Selector&quot;&gt;Audio Device Selector&lt;/a&gt;: Share one output/input deivces with multiple input/output devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-samples&quot;&gt;Test Samples&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ChunMinChang/raw2mp3&quot; title=&quot;Convert raw audio files to mp3 files by various mp3 encoders&quot;&gt;raw2mp3 (mp3)&lt;/a&gt;: Convert raw audio files to mp3 files with different header types.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://helpguide.sony.net/high-res/sample1/v1/en/index.html&quot;&gt;SONY: High-Resolution music files(AAC, FLAC)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hyperion-records.co.uk/testfiles.asp&quot;&gt;Hyperion Records(MP3, FLAC, M4A)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.2l.no/hires/&quot;&gt;HiRes(FLAC, including 5.1 Surround)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.audiocheck.net/&quot;&gt;Audio Check (wav)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;audio-formats&quot;&gt;Audio Formats&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xiph.org/flac/format.html&quot;&gt;Flac&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/FFmpeg/FFmpeg/blob/49c67e79ca761c43c1310a7e81f8607195a631b9/libavcodec/flac.c&quot;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/videolan/vlc/blob/cc79f1f98f89465385c595f572eee9be1ce80c03/modules/codec/flac.c&quot;&gt;vlc&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-references&quot;&gt;Code References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FFmpeg/FFmpeg&quot; title=&quot;FFmpeg source code&quot;&gt;FFmpeg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/videolan/vlc&quot;&gt;vlc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.hydrogenaud.io/index.php?title=Main_Page&quot;&gt;Hydrogenaudio Knowledgebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frequently-used-script&quot;&gt;Frequently Used Script&lt;/h2&gt;

&lt;h3 id=&quot;ffmpeg&quot;&gt;FFmpeg&lt;/h3&gt;

&lt;p&gt;Show metadata:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Show packet data:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffprobe -show_packets &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a sine wav file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -f lavfi -i &quot;sine=frequency=441:duration=5&quot; sine_441hz_5s.wav
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;osx&quot;&gt;OSX&lt;/h3&gt;

&lt;h4 id=&quot;unloadreload-the-devices&quot;&gt;Unload/Reload the devices&lt;/h4&gt;

&lt;p&gt;For the system devices:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo kextunload /System/Library/Extensions/AppleHDA.kext
sudo kextload /System/Library/Extensions/AppleHDA.kext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the Soundflower:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo kextunload -b com.Cycling74.driver.Soundflower
sudo kextload -b com.Cycling74.driver.Soundflower
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Media&quot;]" /><category term="Firefox" /><summary type="html">The resources collection for debugging audio issues.</summary></entry><entry><title type="html">Opaque or Transparent Data Type in a Rust Library</title><link href="http://localhost:4000/post/opaque-or-transparent-data-type-in-a-rust-library" rel="alternate" type="text/html" title="Opaque or Transparent Data Type in a Rust Library" /><published>2018-09-24T00:00:00+08:00</published><updated>2018-09-24T00:00:00+08:00</updated><id>http://localhost:4000/post/opaque-or-transparent-data-type-in-a-rust-library</id><content type="html" xml:base="http://localhost:4000/post/opaque-or-transparent-data-type-in-a-rust-library">&lt;p&gt;This post is synchronized with my &lt;a href=&quot;https://gist.github.com/ChunMinChang/beb8db168260166e8f4759f97c7a11c7&quot; title=&quot;Opaque or Transparent Data Type in a Rust Library&quot;&gt;gist&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;To develop a &lt;em&gt;Rust&lt;/em&gt; library that will be used for the external code, the data may be interoperable or non-interoperable. The interoperable data is a data whose underlying memory layout is known and their values can be modified directly by the external code. On the contrary, the non-interoperable data is a data whose underlying memory layout is unknown so their values cannot be changed directly. The underlying values can only be changed when they provide related APIs to do that.&lt;/p&gt;

&lt;!--read more--&gt;

&lt;p&gt;In summary, an interoperable data must be a transparent-type data so it can be modified by external code, while a non-interoperable data must be an opaque-type data to prevent its values from being changed by the external code directly.&lt;/p&gt;

&lt;p&gt;In this article, we will explain the above ideas in detail by using &lt;em&gt;Rust-to-C&lt;/em&gt; examples.&lt;/p&gt;

&lt;h2 id=&quot;transparent-data-type-in-rust&quot;&gt;Transparent Data Type in Rust&lt;/h2&gt;
&lt;p&gt;By marking a data type with &lt;code class=&quot;highlighter-rouge&quot;&gt;#[repr(C)]&lt;/code&gt;, the data is interoperable with &lt;em&gt;C/C++&lt;/em&gt; since its memory layout is guaranteed to be aligned with &lt;em&gt;C&lt;/em&gt;. It can be called as a normal &lt;em&gt;C&lt;/em&gt; data. For example, we can operate the data with type &lt;code class=&quot;highlighter-rouge&quot;&gt;struct Foo&lt;/code&gt; from &lt;em&gt;Rust&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[repr(C)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;into_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in &lt;em&gt;C&lt;/em&gt; code like:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Data with type `Foo` can be modified directly!&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;opaque-data-type-in-rust&quot;&gt;Opaque Data Type in Rust&lt;/h2&gt;
&lt;p&gt;For a non-interoperable data, we can just pass a pointer to its memory address with type &lt;code class=&quot;highlighter-rouge&quot;&gt;*void&lt;/code&gt;. Without the knowledge of the underlaying data’s memory layout, &lt;em&gt;C/C++&lt;/em&gt; code cannot do anything.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// No `#[repr(C)]` here!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;into_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Cannot do anything with `foo` without knowing the memory layout under this&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// void pointer.&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Even the data type is known, it’s unwise to cast the &lt;code class=&quot;highlighter-rouge&quot;&gt;*void&lt;/code&gt; to a corresponding &lt;em&gt;C&lt;/em&gt; data type since the memory layout may be different. That is, the memory layout of the following &lt;code class=&quot;highlighter-rouge&quot;&gt;struct Foo&lt;/code&gt; in &lt;em&gt;Rust&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// No `#[repr(C)]` here!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;may be different from the the following &lt;code class=&quot;highlighter-rouge&quot;&gt;struct Foo&lt;/code&gt; in &lt;em&gt;C&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore, it’s dangerous to cast a &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt; pointer converted by a &lt;em&gt;Rust&lt;/em&gt;-style &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; pointer to a &lt;em&gt;C&lt;/em&gt;-style &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; pointer to operate it, without marking &lt;code class=&quot;highlighter-rouge&quot;&gt;struct Foo&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;#[repr(C)]&lt;/code&gt; in &lt;em&gt;Rust&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is very likely to fail since `foo-&amp;gt;qux` may point to a different&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// address as expected!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;why-we-need-to-use-opaque-data-type&quot;&gt;Why we need to use Opaque Data Type&lt;/h3&gt;

&lt;p&gt;The reason why we need to use a &lt;em&gt;opaque data type&lt;/em&gt; is well described in &lt;a href=&quot;https://en.wikipedia.org/wiki/Opaque_pointer&quot; title=&quot;Opaque pointer&quot;&gt;Opaque pointer&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Opaque_data_type&quot; title=&quot;Opaque data type&quot;&gt;Opaque data type&lt;/a&gt; on &lt;em&gt;Wiki&lt;/em&gt; page. In brief, it gives us the flexibility to change the underlying implementation without changing the interface or the need to recompile the code using the hidden data.&lt;/p&gt;

&lt;p&gt;For example, the following &lt;em&gt;C&lt;/em&gt; code&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set_something_to_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;based on the following &lt;em&gt;Rust&lt;/em&gt; code&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetSomething&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetSomething&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;into_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_something_to_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;doesn’t need to be modified if we change the &lt;em&gt;Rust&lt;/em&gt; code into&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetSomething&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetSomething&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;into_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_something_to_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;c_void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The real-world example I’ve seen is &lt;a href=&quot;https://en.wikipedia.org/wiki/Handle_(computing)&quot; title=&quot;handle classes&quot;&gt;&lt;em&gt;Handle&lt;/em&gt; class&lt;/a&gt;. &lt;a href=&quot;https://stackoverflow.com/questions/902967/what-is-a-windows-handle/902987#902987&quot; title=&quot;stackoverflow&quot;&gt;Here&lt;/a&gt; is the discussion for Windows’ &lt;code class=&quot;highlighter-rouge&quot;&gt;Handle&lt;/code&gt; type. The basic idea for Windows’ &lt;code class=&quot;highlighter-rouge&quot;&gt;Handle&lt;/code&gt; can be found &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/SysInfo/user-objects&quot; title=&quot;User Objects&quot;&gt;here&lt;/a&gt;. One simple example for that is to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/fileio/opening-a-file-for-reading-or-writing&quot; title=&quot;Opening a File for Reading or Writing&quot;&gt;open a file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://searchfox.org/mozilla-central/rev/0640ea80fbc8d48f8b197cd363e2535c95a15eb3/dom/media/CubebUtils.cpp#89,406&quot; title=&quot;Handle for audio ipc&quot;&gt;Here&lt;/a&gt; is better example for us. This &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/0640ea80fbc8d48f8b197cd363e2535c95a15eb3/dom/media/CubebUtils.cpp#89,406&quot; title=&quot;Handle for audio ipc&quot;&gt;example&lt;/a&gt; returns a &lt;em&gt;handle&lt;/em&gt; from &lt;em&gt;Rust&lt;/em&gt; code and it will be called in &lt;em&gt;C/C++&lt;/em&gt; code. That is exactly what we want to do in this post.&lt;/p&gt;

&lt;h2 id=&quot;sample-code&quot;&gt;Sample Code&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;resource.rs&lt;/em&gt;: List two &lt;em&gt;Rust&lt;/em&gt; structures:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Opaque&lt;/code&gt;: This is a &lt;em&gt;opaque&lt;/em&gt; data type for external code.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Transparent&lt;/code&gt;: This is a &lt;em&gt;transparent&lt;/em&gt; data type for external &lt;em&gt;C&lt;/em&gt; code(marked with &lt;code class=&quot;highlighter-rouge&quot;&gt;#[repr(C)]&lt;/code&gt;).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ext.rs&lt;/em&gt;: Interface to &lt;em&gt;C&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;Operations for &lt;em&gt;non-interoperable&lt;/em&gt; data: &lt;code class=&quot;highlighter-rouge&quot;&gt;get_opaque&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;operate_opaque&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;return_opaque&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Operations for &lt;em&gt;interoperable&lt;/em&gt; data: &lt;code class=&quot;highlighter-rouge&quot;&gt;get_transparent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;return_transparent&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;You can operate the underlying values of the data directly!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ext.h&lt;/em&gt;: Header containes the interfaces for the &lt;em&gt;Rust&lt;/em&gt; library&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;sample.c&lt;/em&gt;: Sample &lt;em&gt;C&lt;/em&gt; code to operate above data&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;sample.cpp&lt;/em&gt; Sample &lt;em&gt;C++&lt;/em&gt; code to operate above data&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Makefile&lt;/em&gt;: Build the sample by &lt;code class=&quot;highlighter-rouge&quot;&gt;$ make&lt;/code&gt;. Clean files by &lt;code class=&quot;highlighter-rouge&quot;&gt;$ make clean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resourcers&quot;&gt;resource.rs&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;// Non-interoperable resource
pub struct Opaque {
    value: i32,
}
impl Opaque {
    pub fn new() -&amp;gt; Self {
        Opaque { value: 100 }
    }
    pub fn add(&amp;amp;mut self, value: i32) {
        self.value += value;
    }
    pub fn get_value(&amp;amp;self) -&amp;gt; i32 {
        self.value
    }
}
impl Drop for Opaque {
    fn drop(&amp;amp;mut self) {
        println!(&amp;quot;drop a Opaque with value: {}&amp;quot;, self.get_value());
    }
}

// Interoperable resource
#[repr(C)]
pub struct Transparent {
    value: i32,
}
impl Transparent {
    pub fn new() -&amp;gt; Self {
        Transparent { value: 100 }
    }
    pub fn get_value(&amp;amp;self) -&amp;gt; i32 {
        self.value
    }
}
impl Drop for Transparent {
    fn drop(&amp;amp;mut self) {
        println!(&amp;quot;drop a Transparent with value: {}&amp;quot;, self.get_value());
    }
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/beb8db168260166e8f4759f97c7a11c7.js?file=resource.rs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;extrs&quot;&gt;ext.rs&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;use resource::{Opaque, Transparent};
use std::os::raw::c_void;

mod resource;

// Interface to a non-interoperable resource
type Handle = *mut c_void;

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn get_opaque() -&amp;gt; Handle {
    // 1. Create a Opaque instance in stack by `Opaque::new()`
    // 2. Copy the Opaque instance from stack into heap by `Box::new(...)`
    // 3. Consume the `Box` and return the wrapped raw pointer
    let boxed_opa = Box::new(Opaque::new());
    println!(&amp;quot;leak opaque @ {:p}&amp;quot;, boxed_opa.as_ref());
    Box::into_raw(boxed_opa) as Handle
    // Box::into_raw(Box::new(Opaque::new())) as *mut _
}

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn operate_opaque(opa: Handle, value: i32) {
    assert!(!opa.is_null());
    println!(&amp;quot;operate leaked opaque @ {:p}&amp;quot;, opa);
    // 1. Cast a void pointer to a Opaque pointer
    // 2. Create a mutable Opaque reference from a Opaque pointer
    let opaque = unsafe { &amp;amp;mut *(opa as *mut Opaque) };
    opaque.add(value);
}

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn return_opaque(opa: Handle) {
    assert!(!opa.is_null());
    println!(&amp;quot;retake leaked opaque @ {:p}&amp;quot;, opa);
    // 1. Cast a void pointer to a Opaque pointer
    // 2. Construct a box from a Opaque pointer
    let opaque = unsafe { Box::&amp;lt;Opaque&amp;gt;::from_raw(opa as *mut _ /* Opaque */) };
    // The box will be dropped after program runs out of the scope, or we can
    // call drop here directly.
    drop(opaque);
}

// Interface to a interoperable resource
#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn get_transparent() -&amp;gt; *mut Transparent {
    // 1. Create a Transparent instance in stack by `Transparent::new()`
    // 2. Copy the Transparent instance from stack into heap by `Box::new(...)`
    // 3. Consume the `Box` and return the wrapped raw pointer
    let boxed_trans = Box::new(Transparent::new());
    println!(&amp;quot;leak transparent @ {:p}&amp;quot;, boxed_trans.as_ref());
    Box::into_raw(boxed_trans)
    // Box::into_raw(Box::new(Transparent::new()))
}

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn return_transparent(tran: *mut Transparent) {
    assert!(!tran.is_null());
    println!(&amp;quot;retake leaked transparent @ {:p}&amp;quot;, tran);
    // 1. Cast a void pointer to a Transparent pointer
    // 2. Construct a box from a Transparent pointer
    let transparent = unsafe { Box::&amp;lt;Transparent&amp;gt;::from_raw(tran) };
    // The box will be dropped after program runs out of the scope, or we can
    // call drop here directly.
    drop(transparent);
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/beb8db168260166e8f4759f97c7a11c7.js?file=ext.rs&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;exth&quot;&gt;ext.h&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;#if !defined(EXT_H)
#define EXT_H

#include &amp;lt;stdint.h&amp;gt; // uint32_t

typedef struct {
  uint32_t value;
} Transparent;

typedef void* Handle;

#if defined(__cplusplus)
extern &amp;quot;C&amp;quot; {
#endif

extern Transparent* get_transparent();
extern void return_transparent(Transparent* transparent);

extern Handle get_opaque();
extern void return_opaque(Handle opaque);
extern void operate_opaque(Handle opaque, uint32_t value);

#if defined(__cplusplus)
}
#endif

#endif // EXT_H&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/beb8db168260166e8f4759f97c7a11c7.js?file=ext.h&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;samplec&quot;&gt;sample.c&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;#include &amp;quot;ext.h&amp;quot;    // Types and in the external library
#include &amp;quot;stdio.h&amp;quot;  // printf

int main() {
  Transparent* transparent = get_transparent();
  printf(&amp;quot;get a transparent @ %p\n&amp;quot;, transparent);
  transparent-&amp;gt;value = 200;
  return_transparent(transparent);
  // Now transparent&amp;#39;s memory is freed and it&amp;#39;s a dangling pointer.

  Handle opaque = get_opaque();
  printf(&amp;quot;get a opaque @ %p\n&amp;quot;, opaque);
  operate_opaque(opaque, 500);
  return_opaque(opaque);
  // Now opaque&amp;#39;s memory is freed and it&amp;#39;s a dangling pointer.

  return 0;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/beb8db168260166e8f4759f97c7a11c7.js?file=sample.c&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;samplecpp&quot;&gt;sample.cpp&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;#include &amp;quot;ext.h&amp;quot;    // Types and in the external library
#include &amp;lt;iostream&amp;gt; // printf
#include &amp;lt;memory&amp;gt;   // std::unique_ptr

int main() {
  std::unique_ptr&amp;lt;Transparent, decltype(&amp;amp;return_transparent)&amp;gt;
    transparent(get_transparent(), return_transparent);
  printf(&amp;quot;get a transparent @ %p\n&amp;quot;, transparent.get());
  transparent-&amp;gt;value = 200;

  std::unique_ptr&amp;lt;void, decltype(&amp;amp;return_opaque)&amp;gt;
    opaque(get_opaque(), return_opaque);
  printf(&amp;quot;get a opaque @ %p\n&amp;quot;, opaque.get());
  operate_opaque(opaque.get(), 500);

  return 0;
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/beb8db168260166e8f4759f97c7a11c7.js?file=sample.cpp&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;makefile&quot;&gt;Makefile&lt;/h3&gt;
&lt;noscript&gt;&lt;pre&gt;all:
				# Build a static library from the Rust file
				rustc --crate-type=staticlib ext.rs
				# Compile the C file with the static library
				# gcc -o sample-c sample.c libext.a
				gcc -o sample-c sample.c -L. -lext
				./sample-c
				# g++ -o sample-cpp sample.cpp libext.a
				g++ -o sample-cpp sample.cpp -L. -lext
				./sample-cpp

clean:
				rm libext.a
				rm sample-c
				rm sample-cpp&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ChunMinChang/beb8db168260166e8f4759f97c7a11c7.js?file=Makefile&quot;&gt; &lt;/script&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Common&quot;]" /><category term="Rust" /><summary type="html">This post is synchronized with my gist file. To develop a Rust library that will be used for the external code, the data may be interoperable or non-interoperable. The interoperable data is a data whose underlying memory layout is known and their values can be modified directly by the external code. On the contrary, the non-interoperable data is a data whose underlying memory layout is unknown so their values cannot be changed directly. The underlying values can only be changed when they provide related APIs to do that.</summary></entry><entry><title type="html">My Rust Notes</title><link href="http://localhost:4000/post/rust-notes" rel="alternate" type="text/html" title="My Rust Notes" /><published>2018-09-12T00:00:00+08:00</published><updated>2018-09-12T00:00:00+08:00</updated><id>http://localhost:4000/post/rust-notes</id><content type="html" xml:base="http://localhost:4000/post/rust-notes">&lt;p&gt;My personal Rust notes.&lt;/p&gt;

&lt;!--read more--&gt;

&lt;h1 id=&quot;rust-notes&quot;&gt;Rust Notes&lt;/h1&gt;

&lt;h2 id=&quot;learning-resources&quot;&gt;Learning Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Quick guide for system programmer
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://legacy.gitbook.com/book/vnduongthanhtung/migrate-from-c-to-rust/details&quot;&gt;30 minutes of Introduction to Rust for C++ programmers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/nrc/r4cppp&quot;&gt;Rust For Systems Programmers&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Official books
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;The Rust Programming Language&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://nostarch.com/Rust&quot;&gt;The Rust Programming Language(book)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920040385.do&quot;&gt;Programming Rust&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;personal-notes&quot;&gt;Personal Notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Common
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/ac1f00e3521755814714436a80d72003&quot; title=&quot;Learning notes for norrowed pointers&quot;&gt;Understand borrowing by read-write concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/e8096bc78d29b237cce3ff5f859834e7&quot; title=&quot;Lifetimes for The Rust References&quot;&gt;Lifetime&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://yodalee.blogspot.com/2019/09/rust-string.html&quot;&gt;Rust Strings&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;How to convert a C strings to Rust strings&lt;/li&gt;
      &lt;li&gt;Phantom data&lt;/li&gt;
      &lt;li&gt;Common Error
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/099cd7d88938ad8840dc98e376a8da29&quot; title=&quot;Don't misuse the pointers of the instances allocated in functions stack&quot;&gt;Don’t misuse the pointers of the instances allocated in functions stack&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=dda40d0b40a8d922649521544f260a91&quot; title=&quot;temporary cstring as ptr&quot;&gt;Temporary cstring as ptr&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;Will get a &lt;code class=&quot;highlighter-rouge&quot;&gt;temporary_cstring_as_ptr&lt;/code&gt; error when running &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo clippy&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;However, it’s ok in some case
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=6229ad42133ceb20a5f25d10a10a313e&quot;&gt;playground example&lt;/a&gt;: Check the IR&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/reference/expressions.html#temporary-lifetimes&quot;&gt;temporary-lifetimes&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;code=use%20std%3A%3Async%3A%3AMutex%3B%0A%0Astruct%20S%20%7B%0A%20%20%20%20mutex%3A%20Mutex%3Cu32%3E%2C%0A%7D%0A%0Aimpl%20S%20%7B%0A%20%20%20%20fn%20new()%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20Self%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20mutex%3A%20Mutex%3A%3Anew(0u32)%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20fn%20panic_while_locking(%26self)%20%7B%0A%20%20%20%20%20%20%20%20let%20_guard%20%3D%20self.mutex.lock().unwrap()%3B%0A%20%20%20%20%20%20%20%20panic!()%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20Drop%20for%20S%20%7B%0A%20%20%20%20fn%20drop(%26mut%20self)%20%7B%0A%20%20%20%20%20%20%20%20let%20_guard%20%3D%20self.mutex.lock().unwrap()%3B%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20The%20backtrace%20cannot%20be%20logged%20when%20test%20thread%20panicked%20again%20while%0A%2F%2F%20panicking.%20See%20the%20backtrace%20by%20running%20main.%0A%23%5Btest%5D%0A%23%5Bshould_panic%5D%0Afn%20test()%20%7B%0A%20%20%20%20let%20s%20%3D%20S%3A%3Anew()%3B%0A%20%20%20%20s.panic_while_locking()%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20s%20%3D%20S%3A%3Anew()%3B%0A%20%20%20%20s.panic_while_locking()%3B%0A%20%20%20%20%2F%2F%20After%20panic_while_locking%20is%20called%2C%20the%20s.mutex%20is%20locked%20while%20panicking.%0A%20%20%20%20%2F%2F%20When%20s.drop()%20is%20called%2C%20we%20will%20get%20another%20panic%20when%20requiring%20lock%0A%20%20%20%20%2F%2F%20for%20the%20locked%20s.mutex.%0A%7D%0A&quot;&gt;Panic while panicking&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Polymorphism
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=6ac0d45db681a07bab0d8eb52bc9880f&quot;&gt;dynamically dispatch&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multi-threading
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;code=use%20std%3A%3Async%3A%3AMutex%3B%0A%0Astruct%20S%20%7B%0A%20%20%20%20m%3A%20Mutex%3Ci32%3E%2C%0A%20%20%20%20x%3A%20u32%2C%0A%7D%0A%0Aimpl%20S%20%7B%0A%20%20%20%20fn%20new()%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20Self%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20m%3A%20Mutex%3A%3Anew(0)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20x%3A%200%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20immutable_borrow(%26self)%20-%3E%20u32%20%7B%0A%20%20%20%20%20%20%20%20self.x%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20mutable_borrow(%26mut%20self)%20%7B%0A%20%20%20%20%20%20%20%20self.x%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20critical_section(%26self)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Enter%20critical%20section%0A%20%20%20%20%20%20%20%20let%20mut%20guard%20%3D%20self.m.lock().unwrap()%3B%0A%20%20%20%20%20%20%20%20*guard%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20%2F%2F%20Leave%20critical%20section%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20s%20%3D%20S%3A%3Anew()%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Enter%20critical%20section%2C%20borrow%20%60s%60%20immutably%0A%20%20%20%20let%20_guard%20%3D%20s.m.lock()%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20It%27s%20ok%20to%20borrow%20%60s%60%20immutably%20again.%0A%20%20%20%20let%20_%20%3D%20s.immutable_borrow()%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20%60s%60%20cannot%20be%20borrowed%20mutably%20when%20it%27s%20already%20borrowed%20immutably%0A%20%20%20%20%2F%2F%20s.mutable_borrow()%3B%0A%20%20%20%20%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20belong%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%2B-------------------%2B%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20v%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%20%20%20%20%2F%2F%20current%20thread%20%20%20%20%20%20%20%20%20%20mutex%20m%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5E%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%2B------------------%2B%0A%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20require%0A%20%20%20%20%2F%2F%0A%20%20%20%20%2F%2F%20Lead%20to%20a%20deadlock%20when%20requiring%20a%20locked%20mutex.%0A%20%20%20%20%2F%2F%20s.critical_section()%3B%0A%7D&quot;&gt;Rules for using mutex&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2015&amp;amp;code=%2F%2F%20use%20std%3A%3Aptr%3B%0Ause%20std%3A%3Async%3A%3Ampsc%3A%3Achannel%3B%0Ause%20std%3A%3Async%3A%3A%7BArc%2C%20Mutex%7D%3B%0Ause%20std%3A%3Athread%3B%0A%0A%2F%2F%20If%20the%20struct%20containing%20any%20pointer%2C%20it%20could%20not%20be%20passed%20across%20threads!%0A%23%5Bderive(Debug)%5D%0Astruct%20Data%20%7B%0A%20%20%20%20value%3A%20usize%2C%0A%20%20%20%20%2F%2F%20ptr%3A%20*const%20()%2C%0A%7D%0A%0Aimpl%20Data%20%7B%0A%20%20%20%20fn%20new(value%3A%20usize)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20Self%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20value%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20ptr%3A%20ptr%3A%3Anull()%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20const%20N%3A%20usize%20%3D%2010%3B%0A%0A%20%20%20%20let%20data%20%3D%20Arc%3A%3Anew(Mutex%3A%3Anew(Data%3A%3Anew(0)))%3B%0A%0A%20%20%20%20let%20(tx%2C%20rx)%20%3D%20channel()%3B%0A%20%20%20%20for%20_%20in%200..N%20%7B%0A%20%20%20%20%20%20%20%20let%20(data%2C%20tx)%20%3D%20(Arc%3A%3Aclone(%26data)%2C%20tx.clone())%3B%0A%20%20%20%20%20%20%20%20thread%3A%3Aspawn(move%20%7C%7C%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20mut%20data%20%3D%20data.lock().unwrap()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20(*data).value%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20(*data).value%20%3D%3D%20N%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tx.send(()).unwrap()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20rx.recv().unwrap()%3B%0A%20%20%20%20%2F%2F%20data%20may%20still%20be%20locked%20when%20rx%20receiveds%20response%20from%20tx.%0A%20%20%20%20let%20data%20%3D%20data.lock().unwrap()%3B%0A%20%20%20%20println!(%22data%3A%20%7B%3A%3F%7D%22%2C%20*data)%3B%0A%7D%0A&quot;&gt;The pointers or struct containing pointers cannot be passed across threads&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/ChunMinChang/play-multithread&quot; title=&quot;Learning multithread in Rust &quot;&gt;Mutex and RwLock&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Async
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?gist=e1a1b98654c3490e81d6ff9c262824a3&amp;amp;version=nightly&amp;amp;mode=debug&amp;amp;edition=2018&quot;&gt;oneshot&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FFI to C library
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/ChunMinChang/rust-audio-lib-sample/tree/master&quot; title=&quot;rust-audio-lib-sample&quot;&gt;A sample Rust library based on platform C APIs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;opaque-or-transparent-data-type-in-a-rust-library.md&quot; title=&quot;Opaque or Transparent Data Type in a Rust Library&quot;&gt;Opaque or Transparent Data Type&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/1e5410f3a7cb8c5bbf066e7dae09d7bc&quot; title=&quot;Pass arrays from Rust to C &quot;&gt;Pass arrays from Rust to C&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=6d6c2271e3811d55f740b20a00975ecf&quot; title=&quot;Leak a vec and then retake it&quot;&gt;live demo&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/27c7edb4ec45d61a1e8a788888f665cb&quot; title=&quot;A mistake when using a Rust vector as a buffer to get the data by a C API&quot;&gt;The size matters! How to mess up memory by using vector in a wrong way&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/3f380eaced6265ab6e8dbb224bfec732&quot; title=&quot;A counterexample to use the memory allocated in external library&quot;&gt;A counterexample to use the memory allocated in external library&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/e8909506cfca774f623fc375fc8ee1d2&quot; title=&quot;Using reference /pointer instead of copying to get a variable-sized struct object&quot;&gt;Using reference /pointer instead of copying to get a variable-sized struct object&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/1acf672babd4e8f79fcf83fa228d1461&quot; title=&quot;Using single-element (tuple) struct to wrap native types&quot;&gt;Using single-element (tuple) struct to wrap native types&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/b76a61273374a1530bc4d6f3be6a7761&quot; title=&quot;Size of the single-element struct&quot;&gt;Size of the single-element struct&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/25f3608c285f1abf2a5c289d5f758427&quot; title=&quot;Using single-element (tuple) struct to wrap C strings&quot;&gt;Benefits to wrap the C string&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/8a22f8a1308b6e0a600e22c4629b2175&quot; title=&quot;A counterexample to register the callback functions to the external libraries&quot;&gt;How to wrap a callback from external library&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;C, C++, Rust Examples to call C Query APIs
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/1acf672babd4e8f79fcf83fa228d1461&quot; title=&quot;Using single-element (tuple) struct to wrap native types&quot;&gt;Basic: Wrap native type by tuple struct &lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/22a30f214c97609d72f17d80740b8506&quot; title=&quot;C, C++, Rust Examples to call C-compatible Query APIs&quot;&gt;With String Handle&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;OSX
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/07b806cb6a9ea1136cb3cbd8cda6c806&quot; title=&quot;Using single-element (tuple) struct to CoreAudio types&quot;&gt;Single-element tuple structs wrapping native CoreAudio types&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/8d13946ebc6c95b2622466c89a0c9bcc&quot; title=&quot;Rust wrappers for OSX dispatch apis&quot;&gt;Rust wrappers for OSX dispatch APIs&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/f0f4a71f78d1e1c6390493ab1c9d10d3&quot; title=&quot;Rust wrappers for OSX property listner on audio devices&quot;&gt;Rust wrappers for OSX property listner on audio devices&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;Rust wrappers for OSX CFString(Ref) APIs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Taste
    &lt;ul&gt;
      &lt;li&gt;Error Handling
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://gist.github.com/ChunMinChang/92d0006fb9fe35abcabff6983d31f0da&quot; title=&quot;Error passing from modules to modules&quot;&gt;Error passing from modules to modules&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Testing
        &lt;ul&gt;
          &lt;li&gt;Embeding a test module inside every module&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Idioms/Patterns
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rust-unofficial/patterns&quot;&gt;rust-unofficial/patterns&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/mre/idiomatic-rust&quot;&gt;mre/idiomatic-rust&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/41081240/idiomatic-callbacks-in-rust&quot;&gt;Idiomatic callbacks in Rust&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://morestina.net/blog/793/closure-lifetimes-in-rust&quot;&gt;Closure lifetimes in Rust&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Common&quot;]" /><category term="Rust" /><summary type="html">My personal Rust notes.</summary></entry><entry><title type="html">Audio 5.1</title><link href="http://localhost:4000/post/audio-5-1" rel="alternate" type="text/html" title="Audio 5.1" /><published>2018-01-23T00:00:00+08:00</published><updated>2018-01-23T00:00:00+08:00</updated><id>http://localhost:4000/post/audio-5-1</id><content type="html" xml:base="http://localhost:4000/post/audio-5-1">&lt;h2 id=&quot;introduction-for-audio-51&quot;&gt;Introduction for Audio 5.1&lt;/h2&gt;

&lt;p&gt;Audio &lt;em&gt;five-point one&lt;/em&gt; is a common surround sound 
layouted in home theater.
It has totally six channels: five speakers and a subwoofer
and this is where the term &lt;em&gt;five-point one&lt;/em&gt; comes from.&lt;/p&gt;

&lt;h2 id=&quot;channel-layout&quot;&gt;Channel Layout&lt;/h2&gt;

&lt;p&gt;Since we have more than one channel,
we need to define an explicit channel ordering
to know which channel the sent/received data is matched to.&lt;/p&gt;

&lt;p&gt;Channel layout specifies the order 
of input/output channel data in audio buffer. 
For example, if the layout is stereo, then we have two channel data.
The first data is for left channel, the second one is right channel.&lt;/p&gt;

&lt;p&gt;The arrangement for the channels is different from format to format.
The most common formats are defined in &lt;em&gt;Wave Format Extensible&lt;/em&gt;(or &lt;em&gt;WaveEx&lt;/em&gt;)
or by &lt;em&gt;Society of Motion Picture &amp;amp; Television Engineers&lt;/em&gt;(or &lt;em&gt;SMPTE&lt;/em&gt;).
They defines what channels are provided and
the ordering of them in different layouts.&lt;/p&gt;

&lt;p&gt;In this post, we follow the &lt;em&gt;SMPTE&lt;/em&gt; format.
An advantage of taking this standard is that
it specifies the &lt;em&gt;up/downmixing&lt;/em&gt; behaviours
between different layouts.
(The SMPTE’s standard for multichannel can be founded in
&lt;a href=&quot;https://www.itu.int/dms_pubrec/itu-r/rec/bs/R-REC-BS.775-3-201208-I!!PDF-E.pdf&quot; title=&quot;ITU-R BS.775-3&quot;&gt;ITU-R BS.775&lt;/a&gt; and &lt;a href=&quot;https://www.itu.int/dms_pub/itu-r/opb/rep/R-REP-BS.2159-7-2015-PDF-E.pdf&quot; title=&quot;ITU-R BS.2159&quot;&gt;ITU-R BS.2159-7&lt;/a&gt;.)&lt;/p&gt;

&lt;h3 id=&quot;channels&quot;&gt;Channels&lt;/h3&gt;

&lt;p&gt;Before knowing how the channels are sorted,
we should know what channel is provided.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Channel Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;Mono&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;Left (Front Left)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;Right (Front Right)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;Center (Front Center)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LS&lt;/td&gt;
      &lt;td&gt;Left Surround (Side Left)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RS&lt;/td&gt;
      &lt;td&gt;Right Surround (Side Right)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RLS&lt;/td&gt;
      &lt;td&gt;Rear Left Surround (Back Left)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RC&lt;/td&gt;
      &lt;td&gt;Rear Center (Back Center)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RRS&lt;/td&gt;
      &lt;td&gt;Rear Right Surround (Back Right)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt;Low Frequency Effects&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;layouts&quot;&gt;Layouts&lt;/h3&gt;

&lt;p&gt;The layout in &lt;em&gt;SMPTE&lt;/em&gt;’s format is as follows.
Each layout is defined by a particular permutation
of the above channels.&lt;/p&gt;

&lt;p&gt;(The sample code to set channel layout on OSX is &lt;a href=&quot;https://gist.github.com/ChunMinChang/ea74c8228745449873716e1d98ba956e&quot; title=&quot;sample code for setting channel layout on OSX&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;!--
| Layout        | channel ||||||||
| ------------- | ----------------------------- |
| DUAL-MONO     | L | R |
| DUAL-MONO-LFE | L | R | LFE |
| MONO          | M |
| MONO-LFE      | M | LFE |
| STEREO        | L | R |
| STEREO-LFE    | L | R | LFE |
| 3F            | L | R | C |
| 3F-LFE        | L | R | C | LFE |
| 2F1           | L | R | RC |
| 2F1-LFE       | L | R | LFE | RC |
| 3F1           | L | R | C | RC |
| 3F1-LFE       | L | R | C | LFE | RC |
| 2F2           | L | R | LS | RS |
| 2F2-LFE       | L | R | LFE | LS | RS |
| 3F2           | L | R | C | LS | RS |
| 3F2-LFE       | L | R | C | LFE | LS | RS |
| 3F3R-LFE      | L | R | C | LFE | RC | LS | RS |
| 3F4-LFE       | L | R | C | LFE | RLS | RRS | LS | RS |
--&gt;

&lt;!--
The following table is made by
1. copying the generated table syntax by the above markdown
2. adding `colspan` to the &lt;th&gt; tag
--&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Layout&lt;/th&gt;
      &lt;th colspan=&quot;8&quot;&gt;channel order&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DUAL-MONO&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DUAL-MONO-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MONO&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MONO-LFE&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;STEREO&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;STEREO-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2F1&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;RC&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2F1-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt;RC&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F1&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;RC&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F1-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt;RC&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2F2&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;LS&lt;/td&gt;
      &lt;td&gt;RS&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2F2-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt;LS&lt;/td&gt;
      &lt;td&gt;RS&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F2&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;LS&lt;/td&gt;
      &lt;td&gt;RS&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F2-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt;LS&lt;/td&gt;
      &lt;td&gt;RS&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F3R-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt;RC&lt;/td&gt;
      &lt;td&gt;LS&lt;/td&gt;
      &lt;td&gt;RS&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3F4-LFE&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;LFE&lt;/td&gt;
      &lt;td&gt;RLS&lt;/td&gt;
      &lt;td&gt;RRS&lt;/td&gt;
      &lt;td&gt;LS&lt;/td&gt;
      &lt;td&gt;RS&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;mixing&quot;&gt;Mixing&lt;/h2&gt;

&lt;p&gt;We already know that the audio layout can be configured into different types
based on the number of the channels.
The question is: what should we do when the input layout from the audio source 
doesn’t match the user’s output layout?&lt;/p&gt;

&lt;p&gt;If the two channel layouts are equal, 
then they must have same numbers of channels and same channel order.
Conversely, if two audio settings have different numbers of channels
(e.g., {L, R} and {M, LFE}),
or they have same numbers of channels but different orders
(e.g., {L, R} and {R, L}),
then they must have different channel layouts.&lt;/p&gt;

&lt;p&gt;When the &lt;strong&gt;input layout is different from the output layout&lt;/strong&gt;, 
we need to convert the audio input data to fit the audio output’s configuration.
We call it &lt;strong&gt;mixing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(The sample code to mix audio data on OSX is &lt;a href=&quot;https://gist.github.com/ChunMinChang/0de31bd5b3213409544ef89db91b696b&quot; title=&quot;sample code for audio mixing on OSX&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;

&lt;h3 id=&quot;mixing-matrix&quot;&gt;Mixing matrix&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;../images/posts/multichannel/mixing-matrix.png&quot; alt=&quot;Mixing matrix&quot; title=&quot;Mixing matrix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although it may have different definitions
to convert the audio data from input into output,
they can be summarized into the following equations.
The above figure illustrates their relationships,
and the value of &lt;script type=&quot;math/tex&quot;&gt;m_{ij}&lt;/script&gt; varies from definition to definition.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
L_{out} &amp;= m_{11} \cdot L_{in} +
           m_{12} \cdot R_{in} +
           m_{13} \cdot C_{in} +
           m_{14} \cdot LFE_{in} +
           m_{15} \cdot LS_{in} +
           m_{16} \cdot RS_{in}
\\
R_{out} &amp;= m_{21} \cdot L_{in} +
           m_{22} \cdot R_{in} +
           m_{23} \cdot C_{in} +
           m_{24} \cdot LFE_{in} +
           m_{25} \cdot LS_{in} +
           m_{26} \cdot RS_{in}
\\
C_{out} &amp;= m_{31} \cdot L_{in} +
           m_{32} \cdot R_{in} +
           m_{33} \cdot C_{in} +
           m_{34} \cdot LFE_{in} +
           m_{35} \cdot LS_{in} +
           m_{36} \cdot RS_{in}
\\
LFE_{out} &amp;= m_{41} \cdot L_{in} +
             m_{42} \cdot R_{in} +
             m_{43} \cdot C_{in} +
             m_{44} \cdot LFE_{in} +
             m_{45} \cdot LS_{in} +
             m_{46} \cdot RS_{in}
\\
LS_{out} &amp;= m_{51} \cdot L_{in} +
            m_{52} \cdot R_{in} +
            m_{53} \cdot C_{in} +
            m_{54} \cdot LFE_{in} +
            m_{55} \cdot LS_{in} +
            m_{56} \cdot RS_{in}
\\
RS_{out} &amp;= m_{61} \cdot L_{in} +
            m_{62} \cdot R_{in} +
            m_{63} \cdot C_{in} +
            m_{64} \cdot LFE_{in} +
            m_{65} \cdot LS_{in} +
            m_{66} \cdot RS_{in}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;To simplify them, we can rewite these equations into a matrix form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\vec{Audio_{out}} =
\begin{bmatrix}
  L_{out} \\ 
  R_{out} \\ 
  C_{out} \\ 
  LFE_{out} \\ 
  LS_{out} \\ 
  RS_{out}
\end{bmatrix}
&amp;=
\begin{bmatrix}
  m_{11} &amp; m_{12} &amp; m_{13} &amp; m_{14} &amp; m_{15} &amp; m_{16} \\
  m_{21} &amp; m_{22} &amp; m_{23} &amp; m_{24} &amp; m_{25} &amp; m_{26} \\
  m_{31} &amp; m_{32} &amp; m_{33} &amp; m_{34} &amp; m_{35} &amp; m_{36} \\
  m_{41} &amp; m_{42} &amp; m_{43} &amp; m_{44} &amp; m_{45} &amp; m_{46} \\
  m_{51} &amp; m_{52} &amp; m_{53} &amp; m_{54} &amp; m_{55} &amp; m_{56} \\
  m_{61} &amp; m_{62} &amp; m_{63} &amp; m_{64} &amp; m_{65} &amp; m_{66} \\
\end{bmatrix}
\cdot
\begin{bmatrix}
  L_{in} \\ 
  R_{in} \\
  C_{in} \\
  LFE_{in} \\
  LS_{in} \\
  RS_{in}
\end{bmatrix}
\\
&amp;=
\vec{Matrix_{mixing}} \cdot \vec{Audio_{in}}
\end{align} %]]&gt;&lt;/script&gt;

&lt;h3 id=&quot;downmixing&quot;&gt;Downmixing&lt;/h3&gt;

&lt;p&gt;When &lt;strong&gt;numbers of input channels &amp;gt; numbers of output channels&lt;/strong&gt;,
we call it &lt;strong&gt;downmixing&lt;/strong&gt;.
(In this case, the input channel layout is definitiely
different from the output one.)
The most common case for downmixing is to
downmix different audio layouts into &lt;em&gt;stereo&lt;/em&gt;.
The audio sources on the internet have various layouts
while most users only have two speakers.&lt;/p&gt;

&lt;p&gt;(The downward mixing mechanism of SMPTE for audio 5.1
is defined in &lt;a href=&quot;https://www.itu.int/dms_pubrec/itu-r/rec/bs/R-REC-BS.775-3-201208-I!!PDF-E.pdf&quot; title=&quot;ITU-R BS.775-3&quot;&gt;Table 2 of ITU-R BS.775-3&lt;/a&gt;.)&lt;/p&gt;

&lt;h5 id=&quot;downmix-audio-51-to-stereostereophonic-sound&quot;&gt;Downmix audio 5.1 to stereo(stereophonic sound)&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;../images/posts/multichannel/dowmix-5point1-to-stereo.png&quot; alt=&quot;Downmix 5.1 to stereo&quot; title=&quot;Downmix 5.1 to stereo&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
L_{out} &amp;= L_{in} +
           \frac{1}{\sqrt{2}} \cdot C_{in} +
           \frac{1}{\sqrt{2}} \cdot LS_{in}
\\
R_{out} &amp;= R_{in} +
           \frac{1}{\sqrt{2}} \cdot C_{in} +
           \frac{1}{\sqrt{2}} \cdot RS_{in} +
\end{align} %]]&gt;&lt;/script&gt;

&lt;h5 id=&quot;downmix-audio-51-to-quadquadraphonic-sound40-surround-sound&quot;&gt;Downmix audio 5.1 to quad(quadraphonic sound/4.0 surround sound)&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;../images/posts/multichannel/dowmix-5point1-to-quad.png&quot; alt=&quot;Downmix 5.1 to quad&quot; title=&quot;Downmix 5.1 to quad&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
L_{out} &amp;= L_{in} + \frac{1}{\sqrt{2}} \cdot C_{in}
\\
R_{out} &amp;= R_{in} + \frac{1}{\sqrt{2}} \cdot C_{in} 
\\
LS_{out} &amp;= LS_{in}
\\
RS_{out} &amp;= RS_{in}
\end{align} %]]&gt;&lt;/script&gt;

&lt;h3 id=&quot;upmixing&quot;&gt;Upmixing&lt;/h3&gt;

&lt;p&gt;When &lt;strong&gt;numbers of input channels &amp;lt; numbers of output channels&lt;/strong&gt;,
we call it &lt;strong&gt;upmixing&lt;/strong&gt;.
(In this case, the input channel layout is definitiely
different from the output one.)&lt;/p&gt;

&lt;p&gt;The most common case for this is to upmix &lt;em&gt;stereo&lt;/em&gt; data(2 channels)
into &lt;em&gt;3F2-LFE/audio 5.1&lt;/em&gt;(6 channels).
There are several papers discussing how to achieve that.&lt;/p&gt;

&lt;h3 id=&quot;other-case&quot;&gt;Other case&lt;/h3&gt;

&lt;p&gt;The other case happens
when &lt;strong&gt;numbers of input channels = numbers of output channels&lt;/strong&gt;,
but their channel layouts are different.&lt;/p&gt;

&lt;p&gt;The conversion is easy as converting 
from &lt;em&gt;STEREO-LFE&lt;/em&gt;: {L, R, LFE} to &lt;em&gt;3F&lt;/em&gt;: {L, R, C} (simply passing data):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
L_{out} &amp;= L_{in}
\\
R_{out} &amp;= R_{in}
\\
C_{out} &amp;= 0
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;;it’s also as complicated as converting
from &lt;em&gt;3F1&lt;/em&gt;: {L, R, C, RC} to &lt;em&gt;2F2(or quad)&lt;/em&gt;: {L, R, LS, RS}:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
L_{out} &amp;= L_{in} + p \cdot C_{in}
\\
R_{out} &amp;= R_{in} + p \cdot C_{in} 
\\
LS_{out} &amp;= q \cdot RC_{in}
\\
RS_{out} &amp;= q \cdot RC_{in}
\end{align} %]]&gt;&lt;/script&gt;
, where &lt;script type=&quot;math/tex&quot;&gt;p, q&lt;/script&gt; are specific values.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Many open source cross-platform audio libraries are good refereces
to learn how to implement multi-channel on different platforms, such as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kinetiknz/cubeb&quot; title=&quot;cubeb&quot;&gt;cubeb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.portaudio.com/&quot; title=&quot;portaudio&quot;&gt;portaudio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://libsound.io/&quot; title=&quot;libsoundio&quot;&gt;libsoundio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My experience for developling multi-channel is limited on &lt;em&gt;cubeb&lt;/em&gt;.
The development project page is hosted &lt;a href=&quot;https://wiki.mozilla.org/Media/multichannel&quot;&gt;here&lt;/a&gt;.
From my experience, most documents for audio development are vague
and sometimes you even cannot find the official manuals
about how to use the APIs(especially on OSX).
The best way to learn that is to read the source code on github.
Read the how other people use the APIs
or the APIs’ implementation directly if it’s possible.&lt;/p&gt;

&lt;p&gt;It’s time to rock on the code!&lt;/p&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Media&quot;]" /><category term="Firefox" /><summary type="html">Introduction for Audio 5.1 Audio five-point one is a common surround sound layouted in home theater. It has totally six channels: five speakers and a subwoofer and this is where the term five-point one comes from. Channel Layout Since we have more than one channel, we need to define an explicit channel ordering to know which channel the sent/received data is matched to. Channel layout specifies the order of input/output channel data in audio buffer. For example, if the layout is stereo, then we have two channel data. The first data is for left channel, the second one is right channel. The arrangement for the channels is different from format to format. The most common formats are defined in Wave Format Extensible(or WaveEx) or by Society of Motion Picture &amp;amp; Television Engineers(or SMPTE). They defines what channels are provided and the ordering of them in different layouts. In this post, we follow the SMPTE format. An advantage of taking this standard is that it specifies the up/downmixing behaviours between different layouts. (The SMPTE’s standard for multichannel can be founded in ITU-R BS.775 and ITU-R BS.2159-7.) Channels Before knowing how the channels are sorted, we should know what channel is provided. Code Channel Name M Mono L Left (Front Left) R Right (Front Right) C Center (Front Center) LS Left Surround (Side Left) RS Right Surround (Side Right) RLS Rear Left Surround (Back Left) RC Rear Center (Back Center) RRS Rear Right Surround (Back Right) LFE Low Frequency Effects Layouts The layout in SMPTE’s format is as follows. Each layout is defined by a particular permutation of the above channels. (The sample code to set channel layout on OSX is here.) Layout channel order DUAL-MONO L R DUAL-MONO-LFE L R LFE MONO M MONO-LFE M LFE STEREO L R STEREO-LFE L R LFE 3F L R C 3F-LFE L R C LFE 2F1 L R RC 2F1-LFE L R LFE RC 3F1 L R C RC 3F1-LFE L R C LFE RC 2F2 L R LS RS 2F2-LFE L R LFE LS RS 3F2 L R C LS RS 3F2-LFE L R C LFE LS RS 3F3R-LFE L R C LFE RC LS RS 3F4-LFE L R C LFE RLS RRS LS RS Mixing We already know that the audio layout can be configured into different types based on the number of the channels. The question is: what should we do when the input layout from the audio source doesn’t match the user’s output layout? If the two channel layouts are equal, then they must have same numbers of channels and same channel order. Conversely, if two audio settings have different numbers of channels (e.g., {L, R} and {M, LFE}), or they have same numbers of channels but different orders (e.g., {L, R} and {R, L}), then they must have different channel layouts. When the input layout is different from the output layout, we need to convert the audio input data to fit the audio output’s configuration. We call it mixing. (The sample code to mix audio data on OSX is here.) Mixing matrix Although it may have different definitions to convert the audio data from input into output, they can be summarized into the following equations. The above figure illustrates their relationships, and the value of varies from definition to definition. To simplify them, we can rewite these equations into a matrix form: Downmixing When numbers of input channels &amp;gt; numbers of output channels, we call it downmixing. (In this case, the input channel layout is definitiely different from the output one.) The most common case for downmixing is to downmix different audio layouts into stereo. The audio sources on the internet have various layouts while most users only have two speakers. (The downward mixing mechanism of SMPTE for audio 5.1 is defined in Table 2 of ITU-R BS.775-3.) Downmix audio 5.1 to stereo(stereophonic sound) Downmix audio 5.1 to quad(quadraphonic sound/4.0 surround sound) Upmixing When numbers of input channels &amp;lt; numbers of output channels, we call it upmixing. (In this case, the input channel layout is definitiely different from the output one.) The most common case for this is to upmix stereo data(2 channels) into 3F2-LFE/audio 5.1(6 channels). There are several papers discussing how to achieve that. Other case The other case happens when numbers of input channels = numbers of output channels, but their channel layouts are different. The conversion is easy as converting from STEREO-LFE: {L, R, LFE} to 3F: {L, R, C} (simply passing data): ;it’s also as complicated as converting from 3F1: {L, R, C, RC} to 2F2(or quad): {L, R, LS, RS}: , where are specific values. Implementation Many open source cross-platform audio libraries are good refereces to learn how to implement multi-channel on different platforms, such as cubeb portaudio libsoundio My experience for developling multi-channel is limited on cubeb. The development project page is hosted here. From my experience, most documents for audio development are vague and sometimes you even cannot find the official manuals about how to use the APIs(especially on OSX). The best way to learn that is to read the source code on github. Read the how other people use the APIs or the APIs’ implementation directly if it’s possible. It’s time to rock on the code!</summary></entry><entry><title type="html">A Room without Windows</title><link href="http://localhost:4000/post/a-room-without-windows" rel="alternate" type="text/html" title="A Room without Windows" /><published>2017-12-30T00:00:00+08:00</published><updated>2017-12-30T00:00:00+08:00</updated><id>http://localhost:4000/post/a-room-without-windows</id><content type="html" xml:base="http://localhost:4000/post/a-room-without-windows">&lt;h1 id=&quot;無窗的房間&quot;&gt;無窗的房間&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.indievox.com/disc/14070&quot;&gt;〈無窗的房間〉&lt;/a&gt;在冬至那天的耳機裡迴盪，
而那個陰暗小房間裡的回憶，也隨著歌聲浮上心頭。
剛出社會的那一年，大概是我目前人生體悟最多的一年。&lt;/p&gt;

&lt;!--read more--&gt;

&lt;iframe src=&quot;https://www.indievox.com/play/disc/14070?width=300&amp;amp;height=460&amp;amp;use_style=small&quot; width=&quot;300&quot; height=&quot;460&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;iframe src=&quot;https://open.spotify.com/embed/album/6lvzOQm8yv4XWWDd481W0u&quot; width=&quot;300&quot; height=&quot;460&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;300&quot; height=&quot;460&quot; src=&quot;https://widget.kkbox.com/v1/?id=GoNlM6tdzZWl82dPV2&amp;amp;type=album&amp;amp;terr=tw&amp;amp;lang=tc&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;iframe src=&quot;https://tools.applemusic.com/embed/v1/album/1322341484?country=us&quot; width=&quot;300&quot; height=&quot;460&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;那年我帶著我老婆(當時是女友)到台北生活，
一起從學生轉為社會人士，一起住在陰暗的小套房，
一起學習如何愛與被愛，一起體認到夢想的重量。&lt;/p&gt;

&lt;!-- 不過這其實也是個關於私奔的故事，
因為我老婆跟我岳父說她要來找同學後就沒有回家了。 --&gt;

&lt;p&gt;在預算有限的情況下，為了租到足夠兩人生活的坪數，
能選的房間狀況自然不是太好，所以那裡總是潮濕，不流通的空氣中總是有股淡淡的菸味。
我們在那個小房間裡做著的各自的夢，但當時我們都太不了解需要多少代價才能實現理想，
不了解要完成一件事背後需要多少妥協。&lt;/p&gt;

&lt;p&gt;第一項挑戰是我要扛下家中的經濟。
老婆在求職的過程中，經濟重心便落在我身上，所幸薪水也還堪養活兩個人。
這過程中，苦的除了生活外，更難的還是在這種金錢關係不對等的壓力下維繫感情。
她會自責自己沒有收入，替我多做一些家務事，但家務事這種相比於金錢很難量化的東西，
容易被習以為常的忽略(你有想過你媽幫你做了多少事嗎)。
在社會的眼光下檢視，也會顯得她好像什麼都沒做一樣。
而我則是每天都覺得自己無能，所以才只能在這樣沒有陽光，連早上都要開燈的房子生存著。
為了不戳破這看似穩定的表象，我們都以笑容掩飾眉頭，以沈默掩蓋著各自背負的壓力，
所以我們也都不懂得對方沒說出口的苦衷，或只是故作泰然。
而無處宣洩的壓力，終究有爆發的一天。幸運的是我們挺過來了。&lt;/p&gt;

&lt;p&gt;要在這種氣氛下追求理想格外困難。
當時我選擇了一份工時正常的工作，自以為可以利用下班後的時間來完成自己想做的事，
結果當年我卻常常浪費時間坐在浴缸裡後悔，後悔自己為何不選擇另一份薪資較高的竹科工作….
或許這樣生活可以過好一點？但我去了應該會連陪老婆吃晚餐的時間都沒有吧？
會一直後悔賣命作嫁他人？十年、二十年後的自己會怎麼想？臨終前會後悔嗎？&lt;/p&gt;

&lt;p&gt;這樣反反覆覆沒有解答的內心糾結，是以前的我最厭惡也極力避免的事。
因為這不會給我什麼實質幫助，反而只會不停地耗掉我的時間和心力。
這在我學生時期根本無法想像，不是每天下班都有一些時間可以用嗎？幹嘛把時間拿去後悔？
可奇怪的是，我明知道我在浪費我唯一重要的資源，但我就是無法停止這樣浪費，
就好像叫憂鬱症的人不要憂鬱ㄧ樣。
而且我真的要後悔也來不及了，因為我研發替代役的役期還有三年。&lt;/p&gt;

&lt;p&gt;這樣的內心壓力，就算不明言，老婆還是會感受到的。
於是我們就會投入更多的時間去維繫感情，形成一個吃時間的惡性循環。
當然也不可能完全沒有其他剩餘的時間，但這些剩餘的時間我只想拿來耍廢，看動漫、看影集、看youtube。
那時候我才理解，為什麼有的同學不想回家，為什麼有的同學整天都在打咖，為什麼叫他們努力一點只是在&lt;a href=&quot;https://itaigi.tw/k/%E9%9D%A0%E8%85%B0/%E5%93%AD%E6%9E%B5/kh%C3%A0u-iau&quot;&gt;靠夭&lt;/a&gt;。&lt;/p&gt;

&lt;!-- 把生活當成黃金傳說大概是我們的苦中作樂了。
買完菜後都會將食材分成好幾等份，並標上價錢貼在冰箱上，
監控每日餐費，甚至還買了種子想當自耕農，可惜沒有陽光都種不出來。
大概就只差沒養雞跟跳到河裡抓魚了。
不過我們也在那個小房間中開發出了各種生活技能，
像是簡易水電修理、用麵粉做出蔥油餅或燒賣皮、
用再來米粉變出蘿蔔糕或碗粿等。
我也是在那才發現把海苔放去烤烤箱會燒掉，
而我老婆更在那發現如何利用短路讓房子瞬間跳電（天生的駭客？）。
喔對了如果跳電別急著找水電工，請先把總電源關掉再開一次試試看，
聽我這句可能省你兩百塊。
這幾年在老婆的提點下廚藝也進步不少，
下班後逛菜市場也逐漸變成一件療癒的調劑。
從買菜到搭配食材下鍋熱炒倒也不算難事，
退休後說不定可以靠第二技能開家家常熱炒店。 --&gt;

&lt;h2 id=&quot;夢想是給有能力承擔虧損的人追的&quot;&gt;夢想是給有能力承擔虧損的人追的&lt;/h2&gt;

&lt;p&gt;學生時代對於追求理想這類的事總是義無反顧，因為就算失敗了，大不了就跟現在一樣而已，又沒虧到什麼。
但開始自己&lt;a href=&quot;https://itaigi.tw/k/%E8%A8%8E%E7%94%9F%E6%B4%BB/%E8%B6%81%E9%A3%9F/th%C3%A0n-tsia%CC%8Dh&quot;&gt;趁食&lt;/a&gt;後，
就會開始比較同樣的時間花在哪裡是對我比較有利的：
我會去想，如果這件事失敗了，我從中獲得的事物與相同時間拿去做其他的事情相比是否划算。
但在這般考量下，所有稱之為夢想的事物都是不划算或虧損的投資，所以也就變得什麼都做不了，只能打安全牌。
這時我才體悟到：「&lt;strong&gt;所謂的夢想，只有在你有能力承擔虧損的情況下才能進行。&lt;/strong&gt;這就是現實。」&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.asia.finance/entrepreneurs-not-special-breed&quot;&gt;Entrepreneurs Aren’t A Special Breed – They’re Mostly Rich Kids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;馬斯洛的金字塔在追求卓越前我想先追求吃得好一點&quot;&gt;馬斯洛的金字塔：在追求卓越前我想先追求吃得好一點&lt;/h2&gt;

&lt;p&gt;生活如此掙扎的主要原因，就是我在滿足「基本生理需求」前就想追求「自我實現」。
我想要住在有乾淨空氣的房子(至少不要有菸味)，我想要有面向陽光的窗戶，
我想要有足夠的兩人空間(吵架才有地方躲)，我想要偶爾可以帶老婆吃吃大餐，但我也想追求自我實現。
我花了很久才認清，在我有能力承擔白日夢的虧損前，只能先好好滿足自己的生理需求。
&lt;strong&gt;以前在書本上看過的馬斯洛金字塔，自力更生後我親身感受了一遍&lt;/strong&gt;。&lt;/p&gt;

&lt;!-- 我也是在當時才發覺啤酒開始變得好喝了，因為人生比啤酒還苦。
你覺得啤酒很苦，是因為你的人生是甘甜的。
真的是千年傳統，全新感受。--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA&quot;&gt;需求層次理論(馬斯洛金字塔)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;匱乏模式稀缺心態&quot;&gt;匱乏模式(稀缺心態)&lt;/h2&gt;

&lt;p&gt;當時我的大腦陷入了一種&lt;em&gt;匱乏模式&lt;/em&gt;（或稱&lt;em&gt;稀缺心態&lt;/em&gt;/&lt;em&gt;窮人思維&lt;/em&gt;）裡，
這間接造成效率下降，最終跌入越來越匱乏的惡性循環。
因為缺時間/金錢，心思便放在如何節省更多時間/金錢上。
一旦做什麼事都想節省時間/金錢，便會耗去更多的心神（&lt;em&gt;認知帶寬&lt;/em&gt;），
進而造成做事效率降低或決策錯誤，
而低下的效率或錯誤的決策都會回過頭來吃掉更多時間/金錢。&lt;/p&gt;

&lt;p&gt;體認到自己身陷這種循環後，我就開始調整心態想辦法脫身，
因為我知道如果不逃離這個迴圈的話，狀況只會越來越慘，
那前面的努力就攏&lt;a href=&quot;https://itaigi.tw/k/%E5%8C%96%E7%82%BA%E7%83%8F%E6%9C%89/%E7%83%8F%E6%9C%89/oo-i%C3%BAㄋ&quot;&gt;烏有去矣&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先是要釐清自己為什麼需要這些時間和這筆錢，
想清楚這些「需要」是&lt;em&gt;必要需求(剛性需求)&lt;/em&gt;或是&lt;em&gt;額外需求(彈性需求)&lt;/em&gt;。
我想做的事，雖然成功率跟什麼時候做有關，
但它不是現在不做以後就無法達成的事，所以就&lt;strong&gt;認命放棄&lt;/strong&gt;吧。
而我對時間的匱乏心態也在放棄個人實現的那一刻予以紓解。&lt;/p&gt;

&lt;p&gt;解決金錢的稀缺心態倒比較單純，就是要先咬牙存夠預備金。
其實它在我放棄個人實現時已經被部分緩解了，這筆錢要拿來作夢不如先拿來吃，
而且當時又剛好幸運地被調薪(這是一個神秘的故事)。
再者，老婆找到工作後我也鬆了一大口氣。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.books.com.tw/products/F012963280&quot;&gt;Scarcity: Why Having Too Little Means So Much&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.books.com.tw/products/0010660478&quot;&gt;(繁體中文)匱乏經濟學：為什麼老是在趕deadline？為什麼老是覺得時間和金錢不夠用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.books.com.tw/products/CN11194292&quot;&gt;(簡體中文)稀缺：我們是如何陷入貧窮與忙碌的&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://4think.net/%E6%89%80%E8%AC%82%E7%9A%84%E3%80%8C%E7%AA%AE%E4%BA%BA%E6%80%9D%E7%B6%AD%E3%80%8D/&quot;&gt;所謂的「窮人思維」&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.hksilicon.com/articles/692597&quot;&gt;讀《稀缺》，洞見窮人和忙人世界的惡性循環&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;需求轉移&quot;&gt;需求轉移&lt;/h3&gt;

&lt;p&gt;人類不只是動物，不可能只滿足生理需求(可能連動物都不只要滿足生理需求而已)。
雖然對「自我實現」的要求降低了，但心力其實也不自覺地被轉移到對愛情(家庭)的「社交需求」上。
我把大部分的時間用來經營兩人的關係，而老婆也如舊回應予我相當大的溫暖。
我們彼此都在愛情和家庭中一起成長，相互支持，更一起養了一隻貓。&lt;/p&gt;

&lt;p&gt;雖然仍會嫌時間不夠用，但我也漸漸體會到將時間優先拿來經營兩人關係(家庭)的重要。
在這之前我對家庭的想像都是很男性的、只考慮經濟面的：賺錢回家、吃好住好等。
經營家庭不僅是讓家人有飯吃就好，家庭的價值更在於&lt;strong&gt;給予愛和被愛&lt;/strong&gt;。
家包含了「自我實現」以下的所有需要：「生理、安全、社會、和尊重」，而只有愛才能滿足這些需要和被需要。
家是可以讓人包容與被包容、關心與被關心、認同與被認同、尊重與被尊重，
永遠都可以接納你的地方，而你也或許是你的伴侶這輩子唯一可以無理取鬧的人了，
所以付出時間來愛與被愛，才能讓你們有動力繼續面對人生。
&lt;strong&gt;一個有愛的人，才有勇氣面對恐懼，面對自己，並創造更好的自己&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;以往我都天真地認為，追求自己想做的事只要努力就好，
但我不理解那是因為有我爸媽的支持我才能做到。
這短短的幾年雖然不輕鬆，但我也很慶幸能在二十幾歲就認知到這件事。&lt;/p&gt;

&lt;p&gt;另外，支持老婆追求自我實現也能部分滿足我的自我實現欲。
因為老婆追求的事物比較有時效性，她也比我有韌性，所以還是一步步地在實踐她的理想。
雖然她的夢想與我不同，但看到她完成什麼的那一刻，我頓時覺得我當時的放棄是值得的。&lt;/p&gt;

&lt;p&gt;與老婆相處的這幾年才讓我學習到，每個人的人生都有自己的步調，
用最快的方式追求夢想，往往也會犧牲掉其他需要時間培養的人事物。
有時候就算要繞遠路才能達到目的地，一起欣賞沿途的風景，也會是很浪漫的事。&lt;/p&gt;

&lt;h2 id=&quot;綠地藍天就在牆外&quot;&gt;綠地藍天就在牆外&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;城市裡，房間的開口總是對著鄰居的牆壁、防火巷，或者汽車輪胎。&lt;/p&gt;

  &lt;p&gt;那不是窗戶。&lt;/p&gt;

  &lt;p&gt;那些開口通往死路、粘膩髒污，與廢氣。&lt;/p&gt;

  &lt;p&gt;那不是窗戶。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;幸運換租到屋況好些的房子後，住進來的第一天，就是打開窗戶讓陽光曬進來。
但我沒想到，馬路上的汽機車廢氣和大樓施工震耳欲聾的撞擊聲，也都跟著溜進來了。
最無奈的是連菸味也陰魂不散地跟了過來，不時在樓梯間飄蕩。
原來，門口對著鄰居的防火巷，窗戶面著馬路或另一面大樓的牆，
樓梯間偶有的菸味，就是台北的日常。
我只不過是從一間無窗的陰暗房間，住到另一間有窗但不能開的房間而已。&lt;/p&gt;

&lt;p&gt;有的時候我會想念從老家窗外望出去的柴山，還有龍泉寺傳來的鐘聲，
幻想著有天能住在那樣清淨的山腳下。
吃著老婆家寄來的蔬果時，也會想起她們家的菜園、鬆軟的泥土、還有旁邊空曠的高粱田，
問著自己哪天也能有一片果園。&lt;/p&gt;

&lt;p&gt;是誰奪走了窗外的綠地和藍天，而&lt;a href=&quot;http://news.ltn.com.tw/news/local/paper/1111666&quot;&gt;玉山的山頂又為什麼變成了私人的水泥礦場&lt;/a&gt;？
什麼時候開始，連開窗都要先看氣象確認明天的空氣品質了？
當我們的下一代在這樣的屋子長大時，他們會知道窗外那片地原本是綠的嗎？
會知道花草不只長在規劃出來的公園嗎？
會知道當初那裡曾經有一座山，那邊有一條溪流？會知道空氣曾經是乾淨的？
或許父母輩的景色也都不曾出現在我們的生命裡，
當年的田野在我們眼裡也是理所當然的工業用地，
但我常在想，我們真的要繼續用更多的自然環境來換取更多的水泥牆嗎？
這一切值得嗎？&lt;/p&gt;

&lt;p&gt;有時候我也會很無奈地感嘆，為什麼會生在牆比人家厚的地方。
在加州出差時看到In-N-Out Burger的招牌下掛著布條在徵店員，時薪13多鎂。
它一個漢堡才2.4鎂，所以在這上班一小時就能賺超過5個漢堡。
在台灣的漢堡店店員一小時能賺幾個漢堡？
人民拿了這麼多的時間去工作，換取到的是合理的薪資嗎？&lt;/p&gt;

&lt;p&gt;當你的時間忙到連生存都不夠時，你不需要綠地，不需要藍天，也不需要窗戶，
你只需要一個可以容納一張床的房間，因為你的時間也只夠用來工作和睡覺而已。
你沒有時間去思考，沒有多餘的心智去想像未來應該是什麼樣貌，
甚至也沒有資源養育下一代。所以你放棄了思考、想像、和未來。
或許，這就是某些人想要我們忘記的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我們住在沒有窗戶的房間，家徒四壁仍擁擠不堪。&lt;/p&gt;

  &lt;p&gt;在灰色的空間裡，我們總是想起藍天，卻總聞到煙味、總聽到雨聲。&lt;/p&gt;

  &lt;p&gt;不知道牆的另一邊是怎樣的時節，又、那邊的牆的另一邊是怎樣的生活。&lt;/p&gt;

  &lt;p&gt;我們住在沒有窗戶的房間，偶爾想起小時候的幸福，疑惑著是哪裡出錯導致今日的窘境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在更美好的未來裡，我們會找回以前人們放棄的綠地、藍天、山林、溪流、泥土、和空氣。
在更美好的未來裡，我們也會有更平衡的薪資工時比例，讓我們有時間思考、想像、培育更遙遠的未來。
找回那些曾經放棄的環境和時間，就是我們這一代人要追尋的命運。
儘管無奈，但我們仍然在這些無窗的房間裡生存著。
皺著眉頭、嘆著氣，我們也仍舊每天打起精神繼續面對人生。
希望只有在我們放棄的時候才會消失。
我始終相信，有一天我們會重新踏上消失的綠草地，
在藍天艷陽下，聞到路間飄來的花香。
至少，要把自己&lt;a href=&quot;https://www.facebook.com/tzchienfans/videos/1405644819517261/&quot;&gt;種在大樹下，泥土裡&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;無窗的房間-1&quot;&gt;無窗的房間&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blow.streetvoice.com/37778-%E6%B7%B7%E5%90%88%E5%8F%B0%E8%AA%9E%E3%80%81%E8%8B%B1%E6%96%87%E9%9B%99%E8%81%B2%E9%81%93-tzchien%E6%85%88%E8%AC%99%E6%BA%AB%E6%9F%94%E9%87%8B%E5%87%BA%E5%85%A8%E6%96%B0%E5%96%AE%E6%9B%B2%E3%80%88/&quot;&gt;Blow吹音樂：混合台語、英文雙聲道 TzChien慈謙溫柔釋出全新單曲〈無窗的房間〉&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tw.news.yahoo.com/%E5%A4%96%E5%9C%A8%E8%88%87%E5%85%A7%E5%9C%A8%E4%BA%A4%E8%9E%8D-tzchien%E6%85%88%E8%AC%99%E7%82%BA%E7%84%A1%E7%AA%97%E6%88%BF%E9%96%93%E5%90%B6%E5%96%8A-070703108.html&quot;&gt;Yahoo!奇摩新聞：外在與內在交融 TzChien慈謙為無窗房間吶喊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Chun-Min Chang</name><email>chun.m.chang@gmail.com</email></author><category term="[&quot;Life&quot;]" /><category term="Memory" /><category term="Music" /><category term="TzChien慈謙" /><summary type="html">無窗的房間 〈無窗的房間〉在冬至那天的耳機裡迴盪， 而那個陰暗小房間裡的回憶，也隨著歌聲浮上心頭。 剛出社會的那一年，大概是我目前人生體悟最多的一年。</summary></entry></feed>